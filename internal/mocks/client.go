// Code generated by MockGen. DO NOT EDIT.
// Source: mocks/client/client.go
//
// Generated by this command:
//
//	mockgen -source mocks/client/client.go -destination internal/mocks/client.go
//

// Package mock_client is a generated GoMock package.
package mock_client

import (
	context "context"
	reflect "reflect"

	client "github.com/openfga/go-sdk/client"
	gomock "go.uber.org/mock/gomock"
)

// MockSdkClient is a mock of SdkClient interface.
type MockSdkClient struct {
	ctrl     *gomock.Controller
	recorder *MockSdkClientMockRecorder
	isgomock struct{}
}

// MockSdkClientMockRecorder is the mock recorder for MockSdkClient.
type MockSdkClientMockRecorder struct {
	mock *MockSdkClient
}

// NewMockSdkClient creates a new mock instance.
func NewMockSdkClient(ctrl *gomock.Controller) *MockSdkClient {
	mock := &MockSdkClient{ctrl: ctrl}
	mock.recorder = &MockSdkClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSdkClient) EXPECT() *MockSdkClientMockRecorder {
	return m.recorder
}

// BatchCheck mocks base method.
func (m *MockSdkClient) BatchCheck(ctx context.Context) client.SdkClientBatchCheckRequestInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchCheck", ctx)
	ret0, _ := ret[0].(client.SdkClientBatchCheckRequestInterface)
	return ret0
}

// BatchCheck indicates an expected call of BatchCheck.
func (mr *MockSdkClientMockRecorder) BatchCheck(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchCheck", reflect.TypeOf((*MockSdkClient)(nil).BatchCheck), ctx)
}

// BatchCheckExecute mocks base method.
func (m *MockSdkClient) BatchCheckExecute(request client.SdkClientBatchCheckRequestInterface) (*client.ClientBatchCheckResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchCheckExecute", request)
	ret0, _ := ret[0].(*client.ClientBatchCheckResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchCheckExecute indicates an expected call of BatchCheckExecute.
func (mr *MockSdkClientMockRecorder) BatchCheckExecute(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchCheckExecute", reflect.TypeOf((*MockSdkClient)(nil).BatchCheckExecute), request)
}

// Check mocks base method.
func (m *MockSdkClient) Check(ctx context.Context) client.SdkClientCheckRequestInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Check", ctx)
	ret0, _ := ret[0].(client.SdkClientCheckRequestInterface)
	return ret0
}

// Check indicates an expected call of Check.
func (mr *MockSdkClientMockRecorder) Check(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Check", reflect.TypeOf((*MockSdkClient)(nil).Check), ctx)
}

// CheckExecute mocks base method.
func (m *MockSdkClient) CheckExecute(request client.SdkClientCheckRequestInterface) (*client.ClientCheckResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckExecute", request)
	ret0, _ := ret[0].(*client.ClientCheckResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckExecute indicates an expected call of CheckExecute.
func (mr *MockSdkClientMockRecorder) CheckExecute(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckExecute", reflect.TypeOf((*MockSdkClient)(nil).CheckExecute), request)
}

// CreateStore mocks base method.
func (m *MockSdkClient) CreateStore(ctx context.Context) client.SdkClientCreateStoreRequestInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStore", ctx)
	ret0, _ := ret[0].(client.SdkClientCreateStoreRequestInterface)
	return ret0
}

// CreateStore indicates an expected call of CreateStore.
func (mr *MockSdkClientMockRecorder) CreateStore(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStore", reflect.TypeOf((*MockSdkClient)(nil).CreateStore), ctx)
}

// CreateStoreExecute mocks base method.
func (m *MockSdkClient) CreateStoreExecute(request client.SdkClientCreateStoreRequestInterface) (*client.ClientCreateStoreResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStoreExecute", request)
	ret0, _ := ret[0].(*client.ClientCreateStoreResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStoreExecute indicates an expected call of CreateStoreExecute.
func (mr *MockSdkClientMockRecorder) CreateStoreExecute(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStoreExecute", reflect.TypeOf((*MockSdkClient)(nil).CreateStoreExecute), request)
}

// DeleteStore mocks base method.
func (m *MockSdkClient) DeleteStore(ctx context.Context) client.SdkClientDeleteStoreRequestInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStore", ctx)
	ret0, _ := ret[0].(client.SdkClientDeleteStoreRequestInterface)
	return ret0
}

// DeleteStore indicates an expected call of DeleteStore.
func (mr *MockSdkClientMockRecorder) DeleteStore(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStore", reflect.TypeOf((*MockSdkClient)(nil).DeleteStore), ctx)
}

// DeleteStoreExecute mocks base method.
func (m *MockSdkClient) DeleteStoreExecute(request client.SdkClientDeleteStoreRequestInterface) (*client.ClientDeleteStoreResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStoreExecute", request)
	ret0, _ := ret[0].(*client.ClientDeleteStoreResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteStoreExecute indicates an expected call of DeleteStoreExecute.
func (mr *MockSdkClientMockRecorder) DeleteStoreExecute(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStoreExecute", reflect.TypeOf((*MockSdkClient)(nil).DeleteStoreExecute), request)
}

// DeleteTuples mocks base method.
func (m *MockSdkClient) DeleteTuples(ctx context.Context) client.SdkClientDeleteTuplesRequestInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTuples", ctx)
	ret0, _ := ret[0].(client.SdkClientDeleteTuplesRequestInterface)
	return ret0
}

// DeleteTuples indicates an expected call of DeleteTuples.
func (mr *MockSdkClientMockRecorder) DeleteTuples(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTuples", reflect.TypeOf((*MockSdkClient)(nil).DeleteTuples), ctx)
}

// DeleteTuplesExecute mocks base method.
func (m *MockSdkClient) DeleteTuplesExecute(request client.SdkClientDeleteTuplesRequestInterface) (*client.ClientWriteResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTuplesExecute", request)
	ret0, _ := ret[0].(*client.ClientWriteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTuplesExecute indicates an expected call of DeleteTuplesExecute.
func (mr *MockSdkClientMockRecorder) DeleteTuplesExecute(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTuplesExecute", reflect.TypeOf((*MockSdkClient)(nil).DeleteTuplesExecute), request)
}

// Expand mocks base method.
func (m *MockSdkClient) Expand(ctx context.Context) client.SdkClientExpandRequestInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Expand", ctx)
	ret0, _ := ret[0].(client.SdkClientExpandRequestInterface)
	return ret0
}

// Expand indicates an expected call of Expand.
func (mr *MockSdkClientMockRecorder) Expand(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Expand", reflect.TypeOf((*MockSdkClient)(nil).Expand), ctx)
}

// ExpandExecute mocks base method.
func (m *MockSdkClient) ExpandExecute(request client.SdkClientExpandRequestInterface) (*client.ClientExpandResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExpandExecute", request)
	ret0, _ := ret[0].(*client.ClientExpandResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExpandExecute indicates an expected call of ExpandExecute.
func (mr *MockSdkClientMockRecorder) ExpandExecute(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExpandExecute", reflect.TypeOf((*MockSdkClient)(nil).ExpandExecute), request)
}

// GetAuthorizationModelId mocks base method.
func (m *MockSdkClient) GetAuthorizationModelId() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthorizationModelId")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthorizationModelId indicates an expected call of GetAuthorizationModelId.
func (mr *MockSdkClientMockRecorder) GetAuthorizationModelId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthorizationModelId", reflect.TypeOf((*MockSdkClient)(nil).GetAuthorizationModelId))
}

// GetStore mocks base method.
func (m *MockSdkClient) GetStore(ctx context.Context) client.SdkClientGetStoreRequestInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStore", ctx)
	ret0, _ := ret[0].(client.SdkClientGetStoreRequestInterface)
	return ret0
}

// GetStore indicates an expected call of GetStore.
func (mr *MockSdkClientMockRecorder) GetStore(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStore", reflect.TypeOf((*MockSdkClient)(nil).GetStore), ctx)
}

// GetStoreExecute mocks base method.
func (m *MockSdkClient) GetStoreExecute(request client.SdkClientGetStoreRequestInterface) (*client.ClientGetStoreResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStoreExecute", request)
	ret0, _ := ret[0].(*client.ClientGetStoreResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStoreExecute indicates an expected call of GetStoreExecute.
func (mr *MockSdkClientMockRecorder) GetStoreExecute(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoreExecute", reflect.TypeOf((*MockSdkClient)(nil).GetStoreExecute), request)
}

// GetStoreId mocks base method.
func (m *MockSdkClient) GetStoreId() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStoreId")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStoreId indicates an expected call of GetStoreId.
func (mr *MockSdkClientMockRecorder) GetStoreId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoreId", reflect.TypeOf((*MockSdkClient)(nil).GetStoreId))
}

// ListObjects mocks base method.
func (m *MockSdkClient) ListObjects(ctx context.Context) client.SdkClientListObjectsRequestInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListObjects", ctx)
	ret0, _ := ret[0].(client.SdkClientListObjectsRequestInterface)
	return ret0
}

// ListObjects indicates an expected call of ListObjects.
func (mr *MockSdkClientMockRecorder) ListObjects(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListObjects", reflect.TypeOf((*MockSdkClient)(nil).ListObjects), ctx)
}

// ListObjectsExecute mocks base method.
func (m *MockSdkClient) ListObjectsExecute(request client.SdkClientListObjectsRequestInterface) (*client.ClientListObjectsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListObjectsExecute", request)
	ret0, _ := ret[0].(*client.ClientListObjectsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListObjectsExecute indicates an expected call of ListObjectsExecute.
func (mr *MockSdkClientMockRecorder) ListObjectsExecute(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListObjectsExecute", reflect.TypeOf((*MockSdkClient)(nil).ListObjectsExecute), request)
}

// ListRelations mocks base method.
func (m *MockSdkClient) ListRelations(ctx context.Context) client.SdkClientListRelationsRequestInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRelations", ctx)
	ret0, _ := ret[0].(client.SdkClientListRelationsRequestInterface)
	return ret0
}

// ListRelations indicates an expected call of ListRelations.
func (mr *MockSdkClientMockRecorder) ListRelations(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRelations", reflect.TypeOf((*MockSdkClient)(nil).ListRelations), ctx)
}

// ListRelationsExecute mocks base method.
func (m *MockSdkClient) ListRelationsExecute(request client.SdkClientListRelationsRequestInterface) (*client.ClientListRelationsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRelationsExecute", request)
	ret0, _ := ret[0].(*client.ClientListRelationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRelationsExecute indicates an expected call of ListRelationsExecute.
func (mr *MockSdkClientMockRecorder) ListRelationsExecute(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRelationsExecute", reflect.TypeOf((*MockSdkClient)(nil).ListRelationsExecute), request)
}

// ListStores mocks base method.
func (m *MockSdkClient) ListStores(ctx context.Context) client.SdkClientListStoresRequestInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStores", ctx)
	ret0, _ := ret[0].(client.SdkClientListStoresRequestInterface)
	return ret0
}

// ListStores indicates an expected call of ListStores.
func (mr *MockSdkClientMockRecorder) ListStores(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStores", reflect.TypeOf((*MockSdkClient)(nil).ListStores), ctx)
}

// ListStoresExecute mocks base method.
func (m *MockSdkClient) ListStoresExecute(request client.SdkClientListStoresRequestInterface) (*client.ClientListStoresResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStoresExecute", request)
	ret0, _ := ret[0].(*client.ClientListStoresResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListStoresExecute indicates an expected call of ListStoresExecute.
func (mr *MockSdkClientMockRecorder) ListStoresExecute(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStoresExecute", reflect.TypeOf((*MockSdkClient)(nil).ListStoresExecute), request)
}

// ListUsers mocks base method.
func (m *MockSdkClient) ListUsers(ctx context.Context) client.SdkClientListUsersRequestInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsers", ctx)
	ret0, _ := ret[0].(client.SdkClientListUsersRequestInterface)
	return ret0
}

// ListUsers indicates an expected call of ListUsers.
func (mr *MockSdkClientMockRecorder) ListUsers(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsers", reflect.TypeOf((*MockSdkClient)(nil).ListUsers), ctx)
}

// ListUsersExecute mocks base method.
func (m *MockSdkClient) ListUsersExecute(r client.SdkClientListUsersRequestInterface) (*client.ClientListUsersResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsersExecute", r)
	ret0, _ := ret[0].(*client.ClientListUsersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsersExecute indicates an expected call of ListUsersExecute.
func (mr *MockSdkClientMockRecorder) ListUsersExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsersExecute", reflect.TypeOf((*MockSdkClient)(nil).ListUsersExecute), r)
}

// Read mocks base method.
func (m *MockSdkClient) Read(ctx context.Context) client.SdkClientReadRequestInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", ctx)
	ret0, _ := ret[0].(client.SdkClientReadRequestInterface)
	return ret0
}

// Read indicates an expected call of Read.
func (mr *MockSdkClientMockRecorder) Read(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockSdkClient)(nil).Read), ctx)
}

// ReadAssertions mocks base method.
func (m *MockSdkClient) ReadAssertions(ctx context.Context) client.SdkClientReadAssertionsRequestInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadAssertions", ctx)
	ret0, _ := ret[0].(client.SdkClientReadAssertionsRequestInterface)
	return ret0
}

// ReadAssertions indicates an expected call of ReadAssertions.
func (mr *MockSdkClientMockRecorder) ReadAssertions(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadAssertions", reflect.TypeOf((*MockSdkClient)(nil).ReadAssertions), ctx)
}

// ReadAssertionsExecute mocks base method.
func (m *MockSdkClient) ReadAssertionsExecute(request client.SdkClientReadAssertionsRequestInterface) (*client.ClientReadAssertionsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadAssertionsExecute", request)
	ret0, _ := ret[0].(*client.ClientReadAssertionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadAssertionsExecute indicates an expected call of ReadAssertionsExecute.
func (mr *MockSdkClientMockRecorder) ReadAssertionsExecute(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadAssertionsExecute", reflect.TypeOf((*MockSdkClient)(nil).ReadAssertionsExecute), request)
}

// ReadAuthorizationModel mocks base method.
func (m *MockSdkClient) ReadAuthorizationModel(ctx context.Context) client.SdkClientReadAuthorizationModelRequestInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadAuthorizationModel", ctx)
	ret0, _ := ret[0].(client.SdkClientReadAuthorizationModelRequestInterface)
	return ret0
}

// ReadAuthorizationModel indicates an expected call of ReadAuthorizationModel.
func (mr *MockSdkClientMockRecorder) ReadAuthorizationModel(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadAuthorizationModel", reflect.TypeOf((*MockSdkClient)(nil).ReadAuthorizationModel), ctx)
}

// ReadAuthorizationModelExecute mocks base method.
func (m *MockSdkClient) ReadAuthorizationModelExecute(request client.SdkClientReadAuthorizationModelRequestInterface) (*client.ClientReadAuthorizationModelResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadAuthorizationModelExecute", request)
	ret0, _ := ret[0].(*client.ClientReadAuthorizationModelResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadAuthorizationModelExecute indicates an expected call of ReadAuthorizationModelExecute.
func (mr *MockSdkClientMockRecorder) ReadAuthorizationModelExecute(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadAuthorizationModelExecute", reflect.TypeOf((*MockSdkClient)(nil).ReadAuthorizationModelExecute), request)
}

// ReadAuthorizationModels mocks base method.
func (m *MockSdkClient) ReadAuthorizationModels(ctx context.Context) client.SdkClientReadAuthorizationModelsRequestInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadAuthorizationModels", ctx)
	ret0, _ := ret[0].(client.SdkClientReadAuthorizationModelsRequestInterface)
	return ret0
}

// ReadAuthorizationModels indicates an expected call of ReadAuthorizationModels.
func (mr *MockSdkClientMockRecorder) ReadAuthorizationModels(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadAuthorizationModels", reflect.TypeOf((*MockSdkClient)(nil).ReadAuthorizationModels), ctx)
}

// ReadAuthorizationModelsExecute mocks base method.
func (m *MockSdkClient) ReadAuthorizationModelsExecute(request client.SdkClientReadAuthorizationModelsRequestInterface) (*client.ClientReadAuthorizationModelsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadAuthorizationModelsExecute", request)
	ret0, _ := ret[0].(*client.ClientReadAuthorizationModelsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadAuthorizationModelsExecute indicates an expected call of ReadAuthorizationModelsExecute.
func (mr *MockSdkClientMockRecorder) ReadAuthorizationModelsExecute(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadAuthorizationModelsExecute", reflect.TypeOf((*MockSdkClient)(nil).ReadAuthorizationModelsExecute), request)
}

// ReadChanges mocks base method.
func (m *MockSdkClient) ReadChanges(ctx context.Context) client.SdkClientReadChangesRequestInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadChanges", ctx)
	ret0, _ := ret[0].(client.SdkClientReadChangesRequestInterface)
	return ret0
}

// ReadChanges indicates an expected call of ReadChanges.
func (mr *MockSdkClientMockRecorder) ReadChanges(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadChanges", reflect.TypeOf((*MockSdkClient)(nil).ReadChanges), ctx)
}

// ReadChangesExecute mocks base method.
func (m *MockSdkClient) ReadChangesExecute(request client.SdkClientReadChangesRequestInterface) (*client.ClientReadChangesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadChangesExecute", request)
	ret0, _ := ret[0].(*client.ClientReadChangesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadChangesExecute indicates an expected call of ReadChangesExecute.
func (mr *MockSdkClientMockRecorder) ReadChangesExecute(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadChangesExecute", reflect.TypeOf((*MockSdkClient)(nil).ReadChangesExecute), request)
}

// ReadExecute mocks base method.
func (m *MockSdkClient) ReadExecute(request client.SdkClientReadRequestInterface) (*client.ClientReadResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadExecute", request)
	ret0, _ := ret[0].(*client.ClientReadResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadExecute indicates an expected call of ReadExecute.
func (mr *MockSdkClientMockRecorder) ReadExecute(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadExecute", reflect.TypeOf((*MockSdkClient)(nil).ReadExecute), request)
}

// ReadLatestAuthorizationModel mocks base method.
func (m *MockSdkClient) ReadLatestAuthorizationModel(ctx context.Context) client.SdkClientReadLatestAuthorizationModelRequestInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadLatestAuthorizationModel", ctx)
	ret0, _ := ret[0].(client.SdkClientReadLatestAuthorizationModelRequestInterface)
	return ret0
}

// ReadLatestAuthorizationModel indicates an expected call of ReadLatestAuthorizationModel.
func (mr *MockSdkClientMockRecorder) ReadLatestAuthorizationModel(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadLatestAuthorizationModel", reflect.TypeOf((*MockSdkClient)(nil).ReadLatestAuthorizationModel), ctx)
}

// ReadLatestAuthorizationModelExecute mocks base method.
func (m *MockSdkClient) ReadLatestAuthorizationModelExecute(request client.SdkClientReadLatestAuthorizationModelRequestInterface) (*client.ClientReadAuthorizationModelResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadLatestAuthorizationModelExecute", request)
	ret0, _ := ret[0].(*client.ClientReadAuthorizationModelResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadLatestAuthorizationModelExecute indicates an expected call of ReadLatestAuthorizationModelExecute.
func (mr *MockSdkClientMockRecorder) ReadLatestAuthorizationModelExecute(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadLatestAuthorizationModelExecute", reflect.TypeOf((*MockSdkClient)(nil).ReadLatestAuthorizationModelExecute), request)
}

// SetAuthorizationModelId mocks base method.
func (m *MockSdkClient) SetAuthorizationModelId(authorizationModelId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetAuthorizationModelId", authorizationModelId)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetAuthorizationModelId indicates an expected call of SetAuthorizationModelId.
func (mr *MockSdkClientMockRecorder) SetAuthorizationModelId(authorizationModelId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAuthorizationModelId", reflect.TypeOf((*MockSdkClient)(nil).SetAuthorizationModelId), authorizationModelId)
}

// SetStoreId mocks base method.
func (m *MockSdkClient) SetStoreId(storeId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetStoreId", storeId)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetStoreId indicates an expected call of SetStoreId.
func (mr *MockSdkClientMockRecorder) SetStoreId(storeId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStoreId", reflect.TypeOf((*MockSdkClient)(nil).SetStoreId), storeId)
}

// Write mocks base method.
func (m *MockSdkClient) Write(ctx context.Context) client.SdkClientWriteRequestInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", ctx)
	ret0, _ := ret[0].(client.SdkClientWriteRequestInterface)
	return ret0
}

// Write indicates an expected call of Write.
func (mr *MockSdkClientMockRecorder) Write(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockSdkClient)(nil).Write), ctx)
}

// WriteAssertions mocks base method.
func (m *MockSdkClient) WriteAssertions(ctx context.Context) client.SdkClientWriteAssertionsRequestInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteAssertions", ctx)
	ret0, _ := ret[0].(client.SdkClientWriteAssertionsRequestInterface)
	return ret0
}

// WriteAssertions indicates an expected call of WriteAssertions.
func (mr *MockSdkClientMockRecorder) WriteAssertions(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteAssertions", reflect.TypeOf((*MockSdkClient)(nil).WriteAssertions), ctx)
}

// WriteAssertionsExecute mocks base method.
func (m *MockSdkClient) WriteAssertionsExecute(request client.SdkClientWriteAssertionsRequestInterface) (*client.ClientWriteAssertionsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteAssertionsExecute", request)
	ret0, _ := ret[0].(*client.ClientWriteAssertionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WriteAssertionsExecute indicates an expected call of WriteAssertionsExecute.
func (mr *MockSdkClientMockRecorder) WriteAssertionsExecute(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteAssertionsExecute", reflect.TypeOf((*MockSdkClient)(nil).WriteAssertionsExecute), request)
}

// WriteAuthorizationModel mocks base method.
func (m *MockSdkClient) WriteAuthorizationModel(ctx context.Context) client.SdkClientWriteAuthorizationModelRequestInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteAuthorizationModel", ctx)
	ret0, _ := ret[0].(client.SdkClientWriteAuthorizationModelRequestInterface)
	return ret0
}

// WriteAuthorizationModel indicates an expected call of WriteAuthorizationModel.
func (mr *MockSdkClientMockRecorder) WriteAuthorizationModel(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteAuthorizationModel", reflect.TypeOf((*MockSdkClient)(nil).WriteAuthorizationModel), ctx)
}

// WriteAuthorizationModelExecute mocks base method.
func (m *MockSdkClient) WriteAuthorizationModelExecute(request client.SdkClientWriteAuthorizationModelRequestInterface) (*client.ClientWriteAuthorizationModelResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteAuthorizationModelExecute", request)
	ret0, _ := ret[0].(*client.ClientWriteAuthorizationModelResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WriteAuthorizationModelExecute indicates an expected call of WriteAuthorizationModelExecute.
func (mr *MockSdkClientMockRecorder) WriteAuthorizationModelExecute(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteAuthorizationModelExecute", reflect.TypeOf((*MockSdkClient)(nil).WriteAuthorizationModelExecute), request)
}

// WriteExecute mocks base method.
func (m *MockSdkClient) WriteExecute(request client.SdkClientWriteRequestInterface) (*client.ClientWriteResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteExecute", request)
	ret0, _ := ret[0].(*client.ClientWriteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WriteExecute indicates an expected call of WriteExecute.
func (mr *MockSdkClientMockRecorder) WriteExecute(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteExecute", reflect.TypeOf((*MockSdkClient)(nil).WriteExecute), request)
}

// WriteTuples mocks base method.
func (m *MockSdkClient) WriteTuples(ctx context.Context) client.SdkClientWriteTuplesRequestInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteTuples", ctx)
	ret0, _ := ret[0].(client.SdkClientWriteTuplesRequestInterface)
	return ret0
}

// WriteTuples indicates an expected call of WriteTuples.
func (mr *MockSdkClientMockRecorder) WriteTuples(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteTuples", reflect.TypeOf((*MockSdkClient)(nil).WriteTuples), ctx)
}

// WriteTuplesExecute mocks base method.
func (m *MockSdkClient) WriteTuplesExecute(request client.SdkClientWriteTuplesRequestInterface) (*client.ClientWriteResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteTuplesExecute", request)
	ret0, _ := ret[0].(*client.ClientWriteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WriteTuplesExecute indicates an expected call of WriteTuplesExecute.
func (mr *MockSdkClientMockRecorder) WriteTuplesExecute(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteTuplesExecute", reflect.TypeOf((*MockSdkClient)(nil).WriteTuplesExecute), request)
}

// MockSdkClientListStoresRequestInterface is a mock of SdkClientListStoresRequestInterface interface.
type MockSdkClientListStoresRequestInterface struct {
	ctrl     *gomock.Controller
	recorder *MockSdkClientListStoresRequestInterfaceMockRecorder
	isgomock struct{}
}

// MockSdkClientListStoresRequestInterfaceMockRecorder is the mock recorder for MockSdkClientListStoresRequestInterface.
type MockSdkClientListStoresRequestInterfaceMockRecorder struct {
	mock *MockSdkClientListStoresRequestInterface
}

// NewMockSdkClientListStoresRequestInterface creates a new mock instance.
func NewMockSdkClientListStoresRequestInterface(ctrl *gomock.Controller) *MockSdkClientListStoresRequestInterface {
	mock := &MockSdkClientListStoresRequestInterface{ctrl: ctrl}
	mock.recorder = &MockSdkClientListStoresRequestInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSdkClientListStoresRequestInterface) EXPECT() *MockSdkClientListStoresRequestInterfaceMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockSdkClientListStoresRequestInterface) Execute() (*client.ClientListStoresResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(*client.ClientListStoresResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockSdkClientListStoresRequestInterfaceMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockSdkClientListStoresRequestInterface)(nil).Execute))
}

// GetContext mocks base method.
func (m *MockSdkClientListStoresRequestInterface) GetContext() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContext")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// GetContext indicates an expected call of GetContext.
func (mr *MockSdkClientListStoresRequestInterfaceMockRecorder) GetContext() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContext", reflect.TypeOf((*MockSdkClientListStoresRequestInterface)(nil).GetContext))
}

// GetOptions mocks base method.
func (m *MockSdkClientListStoresRequestInterface) GetOptions() *client.ClientListStoresOptions {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOptions")
	ret0, _ := ret[0].(*client.ClientListStoresOptions)
	return ret0
}

// GetOptions indicates an expected call of GetOptions.
func (mr *MockSdkClientListStoresRequestInterfaceMockRecorder) GetOptions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOptions", reflect.TypeOf((*MockSdkClientListStoresRequestInterface)(nil).GetOptions))
}

// Options mocks base method.
func (m *MockSdkClientListStoresRequestInterface) Options(options client.ClientListStoresOptions) client.SdkClientListStoresRequestInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Options", options)
	ret0, _ := ret[0].(client.SdkClientListStoresRequestInterface)
	return ret0
}

// Options indicates an expected call of Options.
func (mr *MockSdkClientListStoresRequestInterfaceMockRecorder) Options(options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Options", reflect.TypeOf((*MockSdkClientListStoresRequestInterface)(nil).Options), options)
}

// MockSdkClientCreateStoreRequestInterface is a mock of SdkClientCreateStoreRequestInterface interface.
type MockSdkClientCreateStoreRequestInterface struct {
	ctrl     *gomock.Controller
	recorder *MockSdkClientCreateStoreRequestInterfaceMockRecorder
	isgomock struct{}
}

// MockSdkClientCreateStoreRequestInterfaceMockRecorder is the mock recorder for MockSdkClientCreateStoreRequestInterface.
type MockSdkClientCreateStoreRequestInterfaceMockRecorder struct {
	mock *MockSdkClientCreateStoreRequestInterface
}

// NewMockSdkClientCreateStoreRequestInterface creates a new mock instance.
func NewMockSdkClientCreateStoreRequestInterface(ctrl *gomock.Controller) *MockSdkClientCreateStoreRequestInterface {
	mock := &MockSdkClientCreateStoreRequestInterface{ctrl: ctrl}
	mock.recorder = &MockSdkClientCreateStoreRequestInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSdkClientCreateStoreRequestInterface) EXPECT() *MockSdkClientCreateStoreRequestInterfaceMockRecorder {
	return m.recorder
}

// Body mocks base method.
func (m *MockSdkClientCreateStoreRequestInterface) Body(body client.ClientCreateStoreRequest) client.SdkClientCreateStoreRequestInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Body", body)
	ret0, _ := ret[0].(client.SdkClientCreateStoreRequestInterface)
	return ret0
}

// Body indicates an expected call of Body.
func (mr *MockSdkClientCreateStoreRequestInterfaceMockRecorder) Body(body any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Body", reflect.TypeOf((*MockSdkClientCreateStoreRequestInterface)(nil).Body), body)
}

// Execute mocks base method.
func (m *MockSdkClientCreateStoreRequestInterface) Execute() (*client.ClientCreateStoreResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(*client.ClientCreateStoreResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockSdkClientCreateStoreRequestInterfaceMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockSdkClientCreateStoreRequestInterface)(nil).Execute))
}

// GetBody mocks base method.
func (m *MockSdkClientCreateStoreRequestInterface) GetBody() *client.ClientCreateStoreRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBody")
	ret0, _ := ret[0].(*client.ClientCreateStoreRequest)
	return ret0
}

// GetBody indicates an expected call of GetBody.
func (mr *MockSdkClientCreateStoreRequestInterfaceMockRecorder) GetBody() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBody", reflect.TypeOf((*MockSdkClientCreateStoreRequestInterface)(nil).GetBody))
}

// GetContext mocks base method.
func (m *MockSdkClientCreateStoreRequestInterface) GetContext() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContext")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// GetContext indicates an expected call of GetContext.
func (mr *MockSdkClientCreateStoreRequestInterfaceMockRecorder) GetContext() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContext", reflect.TypeOf((*MockSdkClientCreateStoreRequestInterface)(nil).GetContext))
}

// GetOptions mocks base method.
func (m *MockSdkClientCreateStoreRequestInterface) GetOptions() *client.ClientCreateStoreOptions {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOptions")
	ret0, _ := ret[0].(*client.ClientCreateStoreOptions)
	return ret0
}

// GetOptions indicates an expected call of GetOptions.
func (mr *MockSdkClientCreateStoreRequestInterfaceMockRecorder) GetOptions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOptions", reflect.TypeOf((*MockSdkClientCreateStoreRequestInterface)(nil).GetOptions))
}

// Options mocks base method.
func (m *MockSdkClientCreateStoreRequestInterface) Options(options client.ClientCreateStoreOptions) client.SdkClientCreateStoreRequestInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Options", options)
	ret0, _ := ret[0].(client.SdkClientCreateStoreRequestInterface)
	return ret0
}

// Options indicates an expected call of Options.
func (mr *MockSdkClientCreateStoreRequestInterfaceMockRecorder) Options(options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Options", reflect.TypeOf((*MockSdkClientCreateStoreRequestInterface)(nil).Options), options)
}

// MockSdkClientGetStoreRequestInterface is a mock of SdkClientGetStoreRequestInterface interface.
type MockSdkClientGetStoreRequestInterface struct {
	ctrl     *gomock.Controller
	recorder *MockSdkClientGetStoreRequestInterfaceMockRecorder
	isgomock struct{}
}

// MockSdkClientGetStoreRequestInterfaceMockRecorder is the mock recorder for MockSdkClientGetStoreRequestInterface.
type MockSdkClientGetStoreRequestInterfaceMockRecorder struct {
	mock *MockSdkClientGetStoreRequestInterface
}

// NewMockSdkClientGetStoreRequestInterface creates a new mock instance.
func NewMockSdkClientGetStoreRequestInterface(ctrl *gomock.Controller) *MockSdkClientGetStoreRequestInterface {
	mock := &MockSdkClientGetStoreRequestInterface{ctrl: ctrl}
	mock.recorder = &MockSdkClientGetStoreRequestInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSdkClientGetStoreRequestInterface) EXPECT() *MockSdkClientGetStoreRequestInterfaceMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockSdkClientGetStoreRequestInterface) Execute() (*client.ClientGetStoreResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(*client.ClientGetStoreResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockSdkClientGetStoreRequestInterfaceMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockSdkClientGetStoreRequestInterface)(nil).Execute))
}

// GetContext mocks base method.
func (m *MockSdkClientGetStoreRequestInterface) GetContext() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContext")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// GetContext indicates an expected call of GetContext.
func (mr *MockSdkClientGetStoreRequestInterfaceMockRecorder) GetContext() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContext", reflect.TypeOf((*MockSdkClientGetStoreRequestInterface)(nil).GetContext))
}

// GetOptions mocks base method.
func (m *MockSdkClientGetStoreRequestInterface) GetOptions() *client.ClientGetStoreOptions {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOptions")
	ret0, _ := ret[0].(*client.ClientGetStoreOptions)
	return ret0
}

// GetOptions indicates an expected call of GetOptions.
func (mr *MockSdkClientGetStoreRequestInterfaceMockRecorder) GetOptions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOptions", reflect.TypeOf((*MockSdkClientGetStoreRequestInterface)(nil).GetOptions))
}

// GetStoreIdOverride mocks base method.
func (m *MockSdkClientGetStoreRequestInterface) GetStoreIdOverride() *string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStoreIdOverride")
	ret0, _ := ret[0].(*string)
	return ret0
}

// GetStoreIdOverride indicates an expected call of GetStoreIdOverride.
func (mr *MockSdkClientGetStoreRequestInterfaceMockRecorder) GetStoreIdOverride() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoreIdOverride", reflect.TypeOf((*MockSdkClientGetStoreRequestInterface)(nil).GetStoreIdOverride))
}

// Options mocks base method.
func (m *MockSdkClientGetStoreRequestInterface) Options(options client.ClientGetStoreOptions) client.SdkClientGetStoreRequestInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Options", options)
	ret0, _ := ret[0].(client.SdkClientGetStoreRequestInterface)
	return ret0
}

// Options indicates an expected call of Options.
func (mr *MockSdkClientGetStoreRequestInterfaceMockRecorder) Options(options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Options", reflect.TypeOf((*MockSdkClientGetStoreRequestInterface)(nil).Options), options)
}

// MockSdkClientDeleteStoreRequestInterface is a mock of SdkClientDeleteStoreRequestInterface interface.
type MockSdkClientDeleteStoreRequestInterface struct {
	ctrl     *gomock.Controller
	recorder *MockSdkClientDeleteStoreRequestInterfaceMockRecorder
	isgomock struct{}
}

// MockSdkClientDeleteStoreRequestInterfaceMockRecorder is the mock recorder for MockSdkClientDeleteStoreRequestInterface.
type MockSdkClientDeleteStoreRequestInterfaceMockRecorder struct {
	mock *MockSdkClientDeleteStoreRequestInterface
}

// NewMockSdkClientDeleteStoreRequestInterface creates a new mock instance.
func NewMockSdkClientDeleteStoreRequestInterface(ctrl *gomock.Controller) *MockSdkClientDeleteStoreRequestInterface {
	mock := &MockSdkClientDeleteStoreRequestInterface{ctrl: ctrl}
	mock.recorder = &MockSdkClientDeleteStoreRequestInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSdkClientDeleteStoreRequestInterface) EXPECT() *MockSdkClientDeleteStoreRequestInterfaceMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockSdkClientDeleteStoreRequestInterface) Execute() (*client.ClientDeleteStoreResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(*client.ClientDeleteStoreResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockSdkClientDeleteStoreRequestInterfaceMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockSdkClientDeleteStoreRequestInterface)(nil).Execute))
}

// GetContext mocks base method.
func (m *MockSdkClientDeleteStoreRequestInterface) GetContext() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContext")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// GetContext indicates an expected call of GetContext.
func (mr *MockSdkClientDeleteStoreRequestInterfaceMockRecorder) GetContext() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContext", reflect.TypeOf((*MockSdkClientDeleteStoreRequestInterface)(nil).GetContext))
}

// GetOptions mocks base method.
func (m *MockSdkClientDeleteStoreRequestInterface) GetOptions() *client.ClientDeleteStoreOptions {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOptions")
	ret0, _ := ret[0].(*client.ClientDeleteStoreOptions)
	return ret0
}

// GetOptions indicates an expected call of GetOptions.
func (mr *MockSdkClientDeleteStoreRequestInterfaceMockRecorder) GetOptions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOptions", reflect.TypeOf((*MockSdkClientDeleteStoreRequestInterface)(nil).GetOptions))
}

// GetStoreIdOverride mocks base method.
func (m *MockSdkClientDeleteStoreRequestInterface) GetStoreIdOverride() *string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStoreIdOverride")
	ret0, _ := ret[0].(*string)
	return ret0
}

// GetStoreIdOverride indicates an expected call of GetStoreIdOverride.
func (mr *MockSdkClientDeleteStoreRequestInterfaceMockRecorder) GetStoreIdOverride() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoreIdOverride", reflect.TypeOf((*MockSdkClientDeleteStoreRequestInterface)(nil).GetStoreIdOverride))
}

// Options mocks base method.
func (m *MockSdkClientDeleteStoreRequestInterface) Options(options client.ClientDeleteStoreOptions) client.SdkClientDeleteStoreRequestInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Options", options)
	ret0, _ := ret[0].(client.SdkClientDeleteStoreRequestInterface)
	return ret0
}

// Options indicates an expected call of Options.
func (mr *MockSdkClientDeleteStoreRequestInterfaceMockRecorder) Options(options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Options", reflect.TypeOf((*MockSdkClientDeleteStoreRequestInterface)(nil).Options), options)
}

// MockSdkClientReadAuthorizationModelsRequestInterface is a mock of SdkClientReadAuthorizationModelsRequestInterface interface.
type MockSdkClientReadAuthorizationModelsRequestInterface struct {
	ctrl     *gomock.Controller
	recorder *MockSdkClientReadAuthorizationModelsRequestInterfaceMockRecorder
	isgomock struct{}
}

// MockSdkClientReadAuthorizationModelsRequestInterfaceMockRecorder is the mock recorder for MockSdkClientReadAuthorizationModelsRequestInterface.
type MockSdkClientReadAuthorizationModelsRequestInterfaceMockRecorder struct {
	mock *MockSdkClientReadAuthorizationModelsRequestInterface
}

// NewMockSdkClientReadAuthorizationModelsRequestInterface creates a new mock instance.
func NewMockSdkClientReadAuthorizationModelsRequestInterface(ctrl *gomock.Controller) *MockSdkClientReadAuthorizationModelsRequestInterface {
	mock := &MockSdkClientReadAuthorizationModelsRequestInterface{ctrl: ctrl}
	mock.recorder = &MockSdkClientReadAuthorizationModelsRequestInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSdkClientReadAuthorizationModelsRequestInterface) EXPECT() *MockSdkClientReadAuthorizationModelsRequestInterfaceMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockSdkClientReadAuthorizationModelsRequestInterface) Execute() (*client.ClientReadAuthorizationModelsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(*client.ClientReadAuthorizationModelsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockSdkClientReadAuthorizationModelsRequestInterfaceMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockSdkClientReadAuthorizationModelsRequestInterface)(nil).Execute))
}

// GetContext mocks base method.
func (m *MockSdkClientReadAuthorizationModelsRequestInterface) GetContext() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContext")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// GetContext indicates an expected call of GetContext.
func (mr *MockSdkClientReadAuthorizationModelsRequestInterfaceMockRecorder) GetContext() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContext", reflect.TypeOf((*MockSdkClientReadAuthorizationModelsRequestInterface)(nil).GetContext))
}

// GetOptions mocks base method.
func (m *MockSdkClientReadAuthorizationModelsRequestInterface) GetOptions() *client.ClientReadAuthorizationModelsOptions {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOptions")
	ret0, _ := ret[0].(*client.ClientReadAuthorizationModelsOptions)
	return ret0
}

// GetOptions indicates an expected call of GetOptions.
func (mr *MockSdkClientReadAuthorizationModelsRequestInterfaceMockRecorder) GetOptions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOptions", reflect.TypeOf((*MockSdkClientReadAuthorizationModelsRequestInterface)(nil).GetOptions))
}

// GetStoreIdOverride mocks base method.
func (m *MockSdkClientReadAuthorizationModelsRequestInterface) GetStoreIdOverride() *string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStoreIdOverride")
	ret0, _ := ret[0].(*string)
	return ret0
}

// GetStoreIdOverride indicates an expected call of GetStoreIdOverride.
func (mr *MockSdkClientReadAuthorizationModelsRequestInterfaceMockRecorder) GetStoreIdOverride() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoreIdOverride", reflect.TypeOf((*MockSdkClientReadAuthorizationModelsRequestInterface)(nil).GetStoreIdOverride))
}

// Options mocks base method.
func (m *MockSdkClientReadAuthorizationModelsRequestInterface) Options(options client.ClientReadAuthorizationModelsOptions) client.SdkClientReadAuthorizationModelsRequestInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Options", options)
	ret0, _ := ret[0].(client.SdkClientReadAuthorizationModelsRequestInterface)
	return ret0
}

// Options indicates an expected call of Options.
func (mr *MockSdkClientReadAuthorizationModelsRequestInterfaceMockRecorder) Options(options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Options", reflect.TypeOf((*MockSdkClientReadAuthorizationModelsRequestInterface)(nil).Options), options)
}

// MockSdkClientWriteAuthorizationModelRequestInterface is a mock of SdkClientWriteAuthorizationModelRequestInterface interface.
type MockSdkClientWriteAuthorizationModelRequestInterface struct {
	ctrl     *gomock.Controller
	recorder *MockSdkClientWriteAuthorizationModelRequestInterfaceMockRecorder
	isgomock struct{}
}

// MockSdkClientWriteAuthorizationModelRequestInterfaceMockRecorder is the mock recorder for MockSdkClientWriteAuthorizationModelRequestInterface.
type MockSdkClientWriteAuthorizationModelRequestInterfaceMockRecorder struct {
	mock *MockSdkClientWriteAuthorizationModelRequestInterface
}

// NewMockSdkClientWriteAuthorizationModelRequestInterface creates a new mock instance.
func NewMockSdkClientWriteAuthorizationModelRequestInterface(ctrl *gomock.Controller) *MockSdkClientWriteAuthorizationModelRequestInterface {
	mock := &MockSdkClientWriteAuthorizationModelRequestInterface{ctrl: ctrl}
	mock.recorder = &MockSdkClientWriteAuthorizationModelRequestInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSdkClientWriteAuthorizationModelRequestInterface) EXPECT() *MockSdkClientWriteAuthorizationModelRequestInterfaceMockRecorder {
	return m.recorder
}

// Body mocks base method.
func (m *MockSdkClientWriteAuthorizationModelRequestInterface) Body(body client.ClientWriteAuthorizationModelRequest) client.SdkClientWriteAuthorizationModelRequestInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Body", body)
	ret0, _ := ret[0].(client.SdkClientWriteAuthorizationModelRequestInterface)
	return ret0
}

// Body indicates an expected call of Body.
func (mr *MockSdkClientWriteAuthorizationModelRequestInterfaceMockRecorder) Body(body any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Body", reflect.TypeOf((*MockSdkClientWriteAuthorizationModelRequestInterface)(nil).Body), body)
}

// Execute mocks base method.
func (m *MockSdkClientWriteAuthorizationModelRequestInterface) Execute() (*client.ClientWriteAuthorizationModelResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(*client.ClientWriteAuthorizationModelResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockSdkClientWriteAuthorizationModelRequestInterfaceMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockSdkClientWriteAuthorizationModelRequestInterface)(nil).Execute))
}

// GetBody mocks base method.
func (m *MockSdkClientWriteAuthorizationModelRequestInterface) GetBody() *client.ClientWriteAuthorizationModelRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBody")
	ret0, _ := ret[0].(*client.ClientWriteAuthorizationModelRequest)
	return ret0
}

// GetBody indicates an expected call of GetBody.
func (mr *MockSdkClientWriteAuthorizationModelRequestInterfaceMockRecorder) GetBody() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBody", reflect.TypeOf((*MockSdkClientWriteAuthorizationModelRequestInterface)(nil).GetBody))
}

// GetContext mocks base method.
func (m *MockSdkClientWriteAuthorizationModelRequestInterface) GetContext() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContext")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// GetContext indicates an expected call of GetContext.
func (mr *MockSdkClientWriteAuthorizationModelRequestInterfaceMockRecorder) GetContext() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContext", reflect.TypeOf((*MockSdkClientWriteAuthorizationModelRequestInterface)(nil).GetContext))
}

// GetOptions mocks base method.
func (m *MockSdkClientWriteAuthorizationModelRequestInterface) GetOptions() *client.ClientWriteAuthorizationModelOptions {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOptions")
	ret0, _ := ret[0].(*client.ClientWriteAuthorizationModelOptions)
	return ret0
}

// GetOptions indicates an expected call of GetOptions.
func (mr *MockSdkClientWriteAuthorizationModelRequestInterfaceMockRecorder) GetOptions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOptions", reflect.TypeOf((*MockSdkClientWriteAuthorizationModelRequestInterface)(nil).GetOptions))
}

// GetStoreIdOverride mocks base method.
func (m *MockSdkClientWriteAuthorizationModelRequestInterface) GetStoreIdOverride() *string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStoreIdOverride")
	ret0, _ := ret[0].(*string)
	return ret0
}

// GetStoreIdOverride indicates an expected call of GetStoreIdOverride.
func (mr *MockSdkClientWriteAuthorizationModelRequestInterfaceMockRecorder) GetStoreIdOverride() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoreIdOverride", reflect.TypeOf((*MockSdkClientWriteAuthorizationModelRequestInterface)(nil).GetStoreIdOverride))
}

// Options mocks base method.
func (m *MockSdkClientWriteAuthorizationModelRequestInterface) Options(options client.ClientWriteAuthorizationModelOptions) client.SdkClientWriteAuthorizationModelRequestInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Options", options)
	ret0, _ := ret[0].(client.SdkClientWriteAuthorizationModelRequestInterface)
	return ret0
}

// Options indicates an expected call of Options.
func (mr *MockSdkClientWriteAuthorizationModelRequestInterfaceMockRecorder) Options(options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Options", reflect.TypeOf((*MockSdkClientWriteAuthorizationModelRequestInterface)(nil).Options), options)
}

// MockSdkClientReadAuthorizationModelRequestInterface is a mock of SdkClientReadAuthorizationModelRequestInterface interface.
type MockSdkClientReadAuthorizationModelRequestInterface struct {
	ctrl     *gomock.Controller
	recorder *MockSdkClientReadAuthorizationModelRequestInterfaceMockRecorder
	isgomock struct{}
}

// MockSdkClientReadAuthorizationModelRequestInterfaceMockRecorder is the mock recorder for MockSdkClientReadAuthorizationModelRequestInterface.
type MockSdkClientReadAuthorizationModelRequestInterfaceMockRecorder struct {
	mock *MockSdkClientReadAuthorizationModelRequestInterface
}

// NewMockSdkClientReadAuthorizationModelRequestInterface creates a new mock instance.
func NewMockSdkClientReadAuthorizationModelRequestInterface(ctrl *gomock.Controller) *MockSdkClientReadAuthorizationModelRequestInterface {
	mock := &MockSdkClientReadAuthorizationModelRequestInterface{ctrl: ctrl}
	mock.recorder = &MockSdkClientReadAuthorizationModelRequestInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSdkClientReadAuthorizationModelRequestInterface) EXPECT() *MockSdkClientReadAuthorizationModelRequestInterfaceMockRecorder {
	return m.recorder
}

// Body mocks base method.
func (m *MockSdkClientReadAuthorizationModelRequestInterface) Body(body client.ClientReadAuthorizationModelRequest) client.SdkClientReadAuthorizationModelRequestInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Body", body)
	ret0, _ := ret[0].(client.SdkClientReadAuthorizationModelRequestInterface)
	return ret0
}

// Body indicates an expected call of Body.
func (mr *MockSdkClientReadAuthorizationModelRequestInterfaceMockRecorder) Body(body any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Body", reflect.TypeOf((*MockSdkClientReadAuthorizationModelRequestInterface)(nil).Body), body)
}

// Execute mocks base method.
func (m *MockSdkClientReadAuthorizationModelRequestInterface) Execute() (*client.ClientReadAuthorizationModelResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(*client.ClientReadAuthorizationModelResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockSdkClientReadAuthorizationModelRequestInterfaceMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockSdkClientReadAuthorizationModelRequestInterface)(nil).Execute))
}

// GetAuthorizationModelIdOverride mocks base method.
func (m *MockSdkClientReadAuthorizationModelRequestInterface) GetAuthorizationModelIdOverride() *string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthorizationModelIdOverride")
	ret0, _ := ret[0].(*string)
	return ret0
}

// GetAuthorizationModelIdOverride indicates an expected call of GetAuthorizationModelIdOverride.
func (mr *MockSdkClientReadAuthorizationModelRequestInterfaceMockRecorder) GetAuthorizationModelIdOverride() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthorizationModelIdOverride", reflect.TypeOf((*MockSdkClientReadAuthorizationModelRequestInterface)(nil).GetAuthorizationModelIdOverride))
}

// GetBody mocks base method.
func (m *MockSdkClientReadAuthorizationModelRequestInterface) GetBody() *client.ClientReadAuthorizationModelRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBody")
	ret0, _ := ret[0].(*client.ClientReadAuthorizationModelRequest)
	return ret0
}

// GetBody indicates an expected call of GetBody.
func (mr *MockSdkClientReadAuthorizationModelRequestInterfaceMockRecorder) GetBody() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBody", reflect.TypeOf((*MockSdkClientReadAuthorizationModelRequestInterface)(nil).GetBody))
}

// GetContext mocks base method.
func (m *MockSdkClientReadAuthorizationModelRequestInterface) GetContext() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContext")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// GetContext indicates an expected call of GetContext.
func (mr *MockSdkClientReadAuthorizationModelRequestInterfaceMockRecorder) GetContext() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContext", reflect.TypeOf((*MockSdkClientReadAuthorizationModelRequestInterface)(nil).GetContext))
}

// GetOptions mocks base method.
func (m *MockSdkClientReadAuthorizationModelRequestInterface) GetOptions() *client.ClientReadAuthorizationModelOptions {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOptions")
	ret0, _ := ret[0].(*client.ClientReadAuthorizationModelOptions)
	return ret0
}

// GetOptions indicates an expected call of GetOptions.
func (mr *MockSdkClientReadAuthorizationModelRequestInterfaceMockRecorder) GetOptions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOptions", reflect.TypeOf((*MockSdkClientReadAuthorizationModelRequestInterface)(nil).GetOptions))
}

// GetStoreIdOverride mocks base method.
func (m *MockSdkClientReadAuthorizationModelRequestInterface) GetStoreIdOverride() *string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStoreIdOverride")
	ret0, _ := ret[0].(*string)
	return ret0
}

// GetStoreIdOverride indicates an expected call of GetStoreIdOverride.
func (mr *MockSdkClientReadAuthorizationModelRequestInterfaceMockRecorder) GetStoreIdOverride() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoreIdOverride", reflect.TypeOf((*MockSdkClientReadAuthorizationModelRequestInterface)(nil).GetStoreIdOverride))
}

// Options mocks base method.
func (m *MockSdkClientReadAuthorizationModelRequestInterface) Options(options client.ClientReadAuthorizationModelOptions) client.SdkClientReadAuthorizationModelRequestInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Options", options)
	ret0, _ := ret[0].(client.SdkClientReadAuthorizationModelRequestInterface)
	return ret0
}

// Options indicates an expected call of Options.
func (mr *MockSdkClientReadAuthorizationModelRequestInterfaceMockRecorder) Options(options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Options", reflect.TypeOf((*MockSdkClientReadAuthorizationModelRequestInterface)(nil).Options), options)
}

// MockSdkClientReadLatestAuthorizationModelRequestInterface is a mock of SdkClientReadLatestAuthorizationModelRequestInterface interface.
type MockSdkClientReadLatestAuthorizationModelRequestInterface struct {
	ctrl     *gomock.Controller
	recorder *MockSdkClientReadLatestAuthorizationModelRequestInterfaceMockRecorder
	isgomock struct{}
}

// MockSdkClientReadLatestAuthorizationModelRequestInterfaceMockRecorder is the mock recorder for MockSdkClientReadLatestAuthorizationModelRequestInterface.
type MockSdkClientReadLatestAuthorizationModelRequestInterfaceMockRecorder struct {
	mock *MockSdkClientReadLatestAuthorizationModelRequestInterface
}

// NewMockSdkClientReadLatestAuthorizationModelRequestInterface creates a new mock instance.
func NewMockSdkClientReadLatestAuthorizationModelRequestInterface(ctrl *gomock.Controller) *MockSdkClientReadLatestAuthorizationModelRequestInterface {
	mock := &MockSdkClientReadLatestAuthorizationModelRequestInterface{ctrl: ctrl}
	mock.recorder = &MockSdkClientReadLatestAuthorizationModelRequestInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSdkClientReadLatestAuthorizationModelRequestInterface) EXPECT() *MockSdkClientReadLatestAuthorizationModelRequestInterfaceMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockSdkClientReadLatestAuthorizationModelRequestInterface) Execute() (*client.ClientReadAuthorizationModelResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(*client.ClientReadAuthorizationModelResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockSdkClientReadLatestAuthorizationModelRequestInterfaceMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockSdkClientReadLatestAuthorizationModelRequestInterface)(nil).Execute))
}

// GetContext mocks base method.
func (m *MockSdkClientReadLatestAuthorizationModelRequestInterface) GetContext() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContext")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// GetContext indicates an expected call of GetContext.
func (mr *MockSdkClientReadLatestAuthorizationModelRequestInterfaceMockRecorder) GetContext() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContext", reflect.TypeOf((*MockSdkClientReadLatestAuthorizationModelRequestInterface)(nil).GetContext))
}

// GetOptions mocks base method.
func (m *MockSdkClientReadLatestAuthorizationModelRequestInterface) GetOptions() *client.ClientReadLatestAuthorizationModelOptions {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOptions")
	ret0, _ := ret[0].(*client.ClientReadLatestAuthorizationModelOptions)
	return ret0
}

// GetOptions indicates an expected call of GetOptions.
func (mr *MockSdkClientReadLatestAuthorizationModelRequestInterfaceMockRecorder) GetOptions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOptions", reflect.TypeOf((*MockSdkClientReadLatestAuthorizationModelRequestInterface)(nil).GetOptions))
}

// GetStoreIdOverride mocks base method.
func (m *MockSdkClientReadLatestAuthorizationModelRequestInterface) GetStoreIdOverride() *string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStoreIdOverride")
	ret0, _ := ret[0].(*string)
	return ret0
}

// GetStoreIdOverride indicates an expected call of GetStoreIdOverride.
func (mr *MockSdkClientReadLatestAuthorizationModelRequestInterfaceMockRecorder) GetStoreIdOverride() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoreIdOverride", reflect.TypeOf((*MockSdkClientReadLatestAuthorizationModelRequestInterface)(nil).GetStoreIdOverride))
}

// Options mocks base method.
func (m *MockSdkClientReadLatestAuthorizationModelRequestInterface) Options(options client.ClientReadLatestAuthorizationModelOptions) client.SdkClientReadLatestAuthorizationModelRequestInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Options", options)
	ret0, _ := ret[0].(client.SdkClientReadLatestAuthorizationModelRequestInterface)
	return ret0
}

// Options indicates an expected call of Options.
func (mr *MockSdkClientReadLatestAuthorizationModelRequestInterfaceMockRecorder) Options(options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Options", reflect.TypeOf((*MockSdkClientReadLatestAuthorizationModelRequestInterface)(nil).Options), options)
}

// MockSdkClientReadChangesRequestInterface is a mock of SdkClientReadChangesRequestInterface interface.
type MockSdkClientReadChangesRequestInterface struct {
	ctrl     *gomock.Controller
	recorder *MockSdkClientReadChangesRequestInterfaceMockRecorder
	isgomock struct{}
}

// MockSdkClientReadChangesRequestInterfaceMockRecorder is the mock recorder for MockSdkClientReadChangesRequestInterface.
type MockSdkClientReadChangesRequestInterfaceMockRecorder struct {
	mock *MockSdkClientReadChangesRequestInterface
}

// NewMockSdkClientReadChangesRequestInterface creates a new mock instance.
func NewMockSdkClientReadChangesRequestInterface(ctrl *gomock.Controller) *MockSdkClientReadChangesRequestInterface {
	mock := &MockSdkClientReadChangesRequestInterface{ctrl: ctrl}
	mock.recorder = &MockSdkClientReadChangesRequestInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSdkClientReadChangesRequestInterface) EXPECT() *MockSdkClientReadChangesRequestInterfaceMockRecorder {
	return m.recorder
}

// Body mocks base method.
func (m *MockSdkClientReadChangesRequestInterface) Body(body client.ClientReadChangesRequest) client.SdkClientReadChangesRequestInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Body", body)
	ret0, _ := ret[0].(client.SdkClientReadChangesRequestInterface)
	return ret0
}

// Body indicates an expected call of Body.
func (mr *MockSdkClientReadChangesRequestInterfaceMockRecorder) Body(body any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Body", reflect.TypeOf((*MockSdkClientReadChangesRequestInterface)(nil).Body), body)
}

// Execute mocks base method.
func (m *MockSdkClientReadChangesRequestInterface) Execute() (*client.ClientReadChangesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(*client.ClientReadChangesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockSdkClientReadChangesRequestInterfaceMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockSdkClientReadChangesRequestInterface)(nil).Execute))
}

// GetBody mocks base method.
func (m *MockSdkClientReadChangesRequestInterface) GetBody() *client.ClientReadChangesRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBody")
	ret0, _ := ret[0].(*client.ClientReadChangesRequest)
	return ret0
}

// GetBody indicates an expected call of GetBody.
func (mr *MockSdkClientReadChangesRequestInterfaceMockRecorder) GetBody() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBody", reflect.TypeOf((*MockSdkClientReadChangesRequestInterface)(nil).GetBody))
}

// GetContext mocks base method.
func (m *MockSdkClientReadChangesRequestInterface) GetContext() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContext")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// GetContext indicates an expected call of GetContext.
func (mr *MockSdkClientReadChangesRequestInterfaceMockRecorder) GetContext() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContext", reflect.TypeOf((*MockSdkClientReadChangesRequestInterface)(nil).GetContext))
}

// GetOptions mocks base method.
func (m *MockSdkClientReadChangesRequestInterface) GetOptions() *client.ClientReadChangesOptions {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOptions")
	ret0, _ := ret[0].(*client.ClientReadChangesOptions)
	return ret0
}

// GetOptions indicates an expected call of GetOptions.
func (mr *MockSdkClientReadChangesRequestInterfaceMockRecorder) GetOptions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOptions", reflect.TypeOf((*MockSdkClientReadChangesRequestInterface)(nil).GetOptions))
}

// GetStoreIdOverride mocks base method.
func (m *MockSdkClientReadChangesRequestInterface) GetStoreIdOverride() *string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStoreIdOverride")
	ret0, _ := ret[0].(*string)
	return ret0
}

// GetStoreIdOverride indicates an expected call of GetStoreIdOverride.
func (mr *MockSdkClientReadChangesRequestInterfaceMockRecorder) GetStoreIdOverride() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoreIdOverride", reflect.TypeOf((*MockSdkClientReadChangesRequestInterface)(nil).GetStoreIdOverride))
}

// Options mocks base method.
func (m *MockSdkClientReadChangesRequestInterface) Options(options client.ClientReadChangesOptions) client.SdkClientReadChangesRequestInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Options", options)
	ret0, _ := ret[0].(client.SdkClientReadChangesRequestInterface)
	return ret0
}

// Options indicates an expected call of Options.
func (mr *MockSdkClientReadChangesRequestInterfaceMockRecorder) Options(options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Options", reflect.TypeOf((*MockSdkClientReadChangesRequestInterface)(nil).Options), options)
}

// MockSdkClientReadRequestInterface is a mock of SdkClientReadRequestInterface interface.
type MockSdkClientReadRequestInterface struct {
	ctrl     *gomock.Controller
	recorder *MockSdkClientReadRequestInterfaceMockRecorder
	isgomock struct{}
}

// MockSdkClientReadRequestInterfaceMockRecorder is the mock recorder for MockSdkClientReadRequestInterface.
type MockSdkClientReadRequestInterfaceMockRecorder struct {
	mock *MockSdkClientReadRequestInterface
}

// NewMockSdkClientReadRequestInterface creates a new mock instance.
func NewMockSdkClientReadRequestInterface(ctrl *gomock.Controller) *MockSdkClientReadRequestInterface {
	mock := &MockSdkClientReadRequestInterface{ctrl: ctrl}
	mock.recorder = &MockSdkClientReadRequestInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSdkClientReadRequestInterface) EXPECT() *MockSdkClientReadRequestInterfaceMockRecorder {
	return m.recorder
}

// Body mocks base method.
func (m *MockSdkClientReadRequestInterface) Body(body client.ClientReadRequest) client.SdkClientReadRequestInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Body", body)
	ret0, _ := ret[0].(client.SdkClientReadRequestInterface)
	return ret0
}

// Body indicates an expected call of Body.
func (mr *MockSdkClientReadRequestInterfaceMockRecorder) Body(body any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Body", reflect.TypeOf((*MockSdkClientReadRequestInterface)(nil).Body), body)
}

// Execute mocks base method.
func (m *MockSdkClientReadRequestInterface) Execute() (*client.ClientReadResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(*client.ClientReadResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockSdkClientReadRequestInterfaceMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockSdkClientReadRequestInterface)(nil).Execute))
}

// GetBody mocks base method.
func (m *MockSdkClientReadRequestInterface) GetBody() *client.ClientReadRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBody")
	ret0, _ := ret[0].(*client.ClientReadRequest)
	return ret0
}

// GetBody indicates an expected call of GetBody.
func (mr *MockSdkClientReadRequestInterfaceMockRecorder) GetBody() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBody", reflect.TypeOf((*MockSdkClientReadRequestInterface)(nil).GetBody))
}

// GetContext mocks base method.
func (m *MockSdkClientReadRequestInterface) GetContext() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContext")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// GetContext indicates an expected call of GetContext.
func (mr *MockSdkClientReadRequestInterfaceMockRecorder) GetContext() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContext", reflect.TypeOf((*MockSdkClientReadRequestInterface)(nil).GetContext))
}

// GetOptions mocks base method.
func (m *MockSdkClientReadRequestInterface) GetOptions() *client.ClientReadOptions {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOptions")
	ret0, _ := ret[0].(*client.ClientReadOptions)
	return ret0
}

// GetOptions indicates an expected call of GetOptions.
func (mr *MockSdkClientReadRequestInterfaceMockRecorder) GetOptions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOptions", reflect.TypeOf((*MockSdkClientReadRequestInterface)(nil).GetOptions))
}

// GetStoreIdOverride mocks base method.
func (m *MockSdkClientReadRequestInterface) GetStoreIdOverride() *string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStoreIdOverride")
	ret0, _ := ret[0].(*string)
	return ret0
}

// GetStoreIdOverride indicates an expected call of GetStoreIdOverride.
func (mr *MockSdkClientReadRequestInterfaceMockRecorder) GetStoreIdOverride() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoreIdOverride", reflect.TypeOf((*MockSdkClientReadRequestInterface)(nil).GetStoreIdOverride))
}

// Options mocks base method.
func (m *MockSdkClientReadRequestInterface) Options(options client.ClientReadOptions) client.SdkClientReadRequestInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Options", options)
	ret0, _ := ret[0].(client.SdkClientReadRequestInterface)
	return ret0
}

// Options indicates an expected call of Options.
func (mr *MockSdkClientReadRequestInterfaceMockRecorder) Options(options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Options", reflect.TypeOf((*MockSdkClientReadRequestInterface)(nil).Options), options)
}

// MockSdkClientWriteRequestInterface is a mock of SdkClientWriteRequestInterface interface.
type MockSdkClientWriteRequestInterface struct {
	ctrl     *gomock.Controller
	recorder *MockSdkClientWriteRequestInterfaceMockRecorder
	isgomock struct{}
}

// MockSdkClientWriteRequestInterfaceMockRecorder is the mock recorder for MockSdkClientWriteRequestInterface.
type MockSdkClientWriteRequestInterfaceMockRecorder struct {
	mock *MockSdkClientWriteRequestInterface
}

// NewMockSdkClientWriteRequestInterface creates a new mock instance.
func NewMockSdkClientWriteRequestInterface(ctrl *gomock.Controller) *MockSdkClientWriteRequestInterface {
	mock := &MockSdkClientWriteRequestInterface{ctrl: ctrl}
	mock.recorder = &MockSdkClientWriteRequestInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSdkClientWriteRequestInterface) EXPECT() *MockSdkClientWriteRequestInterfaceMockRecorder {
	return m.recorder
}

// Body mocks base method.
func (m *MockSdkClientWriteRequestInterface) Body(body client.ClientWriteRequest) client.SdkClientWriteRequestInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Body", body)
	ret0, _ := ret[0].(client.SdkClientWriteRequestInterface)
	return ret0
}

// Body indicates an expected call of Body.
func (mr *MockSdkClientWriteRequestInterfaceMockRecorder) Body(body any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Body", reflect.TypeOf((*MockSdkClientWriteRequestInterface)(nil).Body), body)
}

// Execute mocks base method.
func (m *MockSdkClientWriteRequestInterface) Execute() (*client.ClientWriteResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(*client.ClientWriteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockSdkClientWriteRequestInterfaceMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockSdkClientWriteRequestInterface)(nil).Execute))
}

// GetAuthorizationModelIdOverride mocks base method.
func (m *MockSdkClientWriteRequestInterface) GetAuthorizationModelIdOverride() *string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthorizationModelIdOverride")
	ret0, _ := ret[0].(*string)
	return ret0
}

// GetAuthorizationModelIdOverride indicates an expected call of GetAuthorizationModelIdOverride.
func (mr *MockSdkClientWriteRequestInterfaceMockRecorder) GetAuthorizationModelIdOverride() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthorizationModelIdOverride", reflect.TypeOf((*MockSdkClientWriteRequestInterface)(nil).GetAuthorizationModelIdOverride))
}

// GetBody mocks base method.
func (m *MockSdkClientWriteRequestInterface) GetBody() *client.ClientWriteRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBody")
	ret0, _ := ret[0].(*client.ClientWriteRequest)
	return ret0
}

// GetBody indicates an expected call of GetBody.
func (mr *MockSdkClientWriteRequestInterfaceMockRecorder) GetBody() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBody", reflect.TypeOf((*MockSdkClientWriteRequestInterface)(nil).GetBody))
}

// GetContext mocks base method.
func (m *MockSdkClientWriteRequestInterface) GetContext() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContext")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// GetContext indicates an expected call of GetContext.
func (mr *MockSdkClientWriteRequestInterfaceMockRecorder) GetContext() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContext", reflect.TypeOf((*MockSdkClientWriteRequestInterface)(nil).GetContext))
}

// GetOptions mocks base method.
func (m *MockSdkClientWriteRequestInterface) GetOptions() *client.ClientWriteOptions {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOptions")
	ret0, _ := ret[0].(*client.ClientWriteOptions)
	return ret0
}

// GetOptions indicates an expected call of GetOptions.
func (mr *MockSdkClientWriteRequestInterfaceMockRecorder) GetOptions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOptions", reflect.TypeOf((*MockSdkClientWriteRequestInterface)(nil).GetOptions))
}

// GetStoreIdOverride mocks base method.
func (m *MockSdkClientWriteRequestInterface) GetStoreIdOverride() *string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStoreIdOverride")
	ret0, _ := ret[0].(*string)
	return ret0
}

// GetStoreIdOverride indicates an expected call of GetStoreIdOverride.
func (mr *MockSdkClientWriteRequestInterfaceMockRecorder) GetStoreIdOverride() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoreIdOverride", reflect.TypeOf((*MockSdkClientWriteRequestInterface)(nil).GetStoreIdOverride))
}

// Options mocks base method.
func (m *MockSdkClientWriteRequestInterface) Options(options client.ClientWriteOptions) client.SdkClientWriteRequestInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Options", options)
	ret0, _ := ret[0].(client.SdkClientWriteRequestInterface)
	return ret0
}

// Options indicates an expected call of Options.
func (mr *MockSdkClientWriteRequestInterfaceMockRecorder) Options(options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Options", reflect.TypeOf((*MockSdkClientWriteRequestInterface)(nil).Options), options)
}

// MockSdkClientWriteTuplesRequestInterface is a mock of SdkClientWriteTuplesRequestInterface interface.
type MockSdkClientWriteTuplesRequestInterface struct {
	ctrl     *gomock.Controller
	recorder *MockSdkClientWriteTuplesRequestInterfaceMockRecorder
	isgomock struct{}
}

// MockSdkClientWriteTuplesRequestInterfaceMockRecorder is the mock recorder for MockSdkClientWriteTuplesRequestInterface.
type MockSdkClientWriteTuplesRequestInterfaceMockRecorder struct {
	mock *MockSdkClientWriteTuplesRequestInterface
}

// NewMockSdkClientWriteTuplesRequestInterface creates a new mock instance.
func NewMockSdkClientWriteTuplesRequestInterface(ctrl *gomock.Controller) *MockSdkClientWriteTuplesRequestInterface {
	mock := &MockSdkClientWriteTuplesRequestInterface{ctrl: ctrl}
	mock.recorder = &MockSdkClientWriteTuplesRequestInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSdkClientWriteTuplesRequestInterface) EXPECT() *MockSdkClientWriteTuplesRequestInterfaceMockRecorder {
	return m.recorder
}

// Body mocks base method.
func (m *MockSdkClientWriteTuplesRequestInterface) Body(body client.ClientWriteTuplesBody) client.SdkClientWriteTuplesRequestInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Body", body)
	ret0, _ := ret[0].(client.SdkClientWriteTuplesRequestInterface)
	return ret0
}

// Body indicates an expected call of Body.
func (mr *MockSdkClientWriteTuplesRequestInterfaceMockRecorder) Body(body any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Body", reflect.TypeOf((*MockSdkClientWriteTuplesRequestInterface)(nil).Body), body)
}

// Execute mocks base method.
func (m *MockSdkClientWriteTuplesRequestInterface) Execute() (*client.ClientWriteResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(*client.ClientWriteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockSdkClientWriteTuplesRequestInterfaceMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockSdkClientWriteTuplesRequestInterface)(nil).Execute))
}

// GetBody mocks base method.
func (m *MockSdkClientWriteTuplesRequestInterface) GetBody() *client.ClientWriteTuplesBody {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBody")
	ret0, _ := ret[0].(*client.ClientWriteTuplesBody)
	return ret0
}

// GetBody indicates an expected call of GetBody.
func (mr *MockSdkClientWriteTuplesRequestInterfaceMockRecorder) GetBody() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBody", reflect.TypeOf((*MockSdkClientWriteTuplesRequestInterface)(nil).GetBody))
}

// GetContext mocks base method.
func (m *MockSdkClientWriteTuplesRequestInterface) GetContext() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContext")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// GetContext indicates an expected call of GetContext.
func (mr *MockSdkClientWriteTuplesRequestInterfaceMockRecorder) GetContext() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContext", reflect.TypeOf((*MockSdkClientWriteTuplesRequestInterface)(nil).GetContext))
}

// GetOptions mocks base method.
func (m *MockSdkClientWriteTuplesRequestInterface) GetOptions() *client.ClientWriteOptions {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOptions")
	ret0, _ := ret[0].(*client.ClientWriteOptions)
	return ret0
}

// GetOptions indicates an expected call of GetOptions.
func (mr *MockSdkClientWriteTuplesRequestInterfaceMockRecorder) GetOptions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOptions", reflect.TypeOf((*MockSdkClientWriteTuplesRequestInterface)(nil).GetOptions))
}

// Options mocks base method.
func (m *MockSdkClientWriteTuplesRequestInterface) Options(options client.ClientWriteOptions) client.SdkClientWriteTuplesRequestInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Options", options)
	ret0, _ := ret[0].(client.SdkClientWriteTuplesRequestInterface)
	return ret0
}

// Options indicates an expected call of Options.
func (mr *MockSdkClientWriteTuplesRequestInterfaceMockRecorder) Options(options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Options", reflect.TypeOf((*MockSdkClientWriteTuplesRequestInterface)(nil).Options), options)
}

// MockSdkClientDeleteTuplesRequestInterface is a mock of SdkClientDeleteTuplesRequestInterface interface.
type MockSdkClientDeleteTuplesRequestInterface struct {
	ctrl     *gomock.Controller
	recorder *MockSdkClientDeleteTuplesRequestInterfaceMockRecorder
	isgomock struct{}
}

// MockSdkClientDeleteTuplesRequestInterfaceMockRecorder is the mock recorder for MockSdkClientDeleteTuplesRequestInterface.
type MockSdkClientDeleteTuplesRequestInterfaceMockRecorder struct {
	mock *MockSdkClientDeleteTuplesRequestInterface
}

// NewMockSdkClientDeleteTuplesRequestInterface creates a new mock instance.
func NewMockSdkClientDeleteTuplesRequestInterface(ctrl *gomock.Controller) *MockSdkClientDeleteTuplesRequestInterface {
	mock := &MockSdkClientDeleteTuplesRequestInterface{ctrl: ctrl}
	mock.recorder = &MockSdkClientDeleteTuplesRequestInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSdkClientDeleteTuplesRequestInterface) EXPECT() *MockSdkClientDeleteTuplesRequestInterfaceMockRecorder {
	return m.recorder
}

// Body mocks base method.
func (m *MockSdkClientDeleteTuplesRequestInterface) Body(body client.ClientDeleteTuplesBody) client.SdkClientDeleteTuplesRequestInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Body", body)
	ret0, _ := ret[0].(client.SdkClientDeleteTuplesRequestInterface)
	return ret0
}

// Body indicates an expected call of Body.
func (mr *MockSdkClientDeleteTuplesRequestInterfaceMockRecorder) Body(body any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Body", reflect.TypeOf((*MockSdkClientDeleteTuplesRequestInterface)(nil).Body), body)
}

// Execute mocks base method.
func (m *MockSdkClientDeleteTuplesRequestInterface) Execute() (*client.ClientWriteResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(*client.ClientWriteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockSdkClientDeleteTuplesRequestInterfaceMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockSdkClientDeleteTuplesRequestInterface)(nil).Execute))
}

// GetBody mocks base method.
func (m *MockSdkClientDeleteTuplesRequestInterface) GetBody() *client.ClientDeleteTuplesBody {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBody")
	ret0, _ := ret[0].(*client.ClientDeleteTuplesBody)
	return ret0
}

// GetBody indicates an expected call of GetBody.
func (mr *MockSdkClientDeleteTuplesRequestInterfaceMockRecorder) GetBody() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBody", reflect.TypeOf((*MockSdkClientDeleteTuplesRequestInterface)(nil).GetBody))
}

// GetContext mocks base method.
func (m *MockSdkClientDeleteTuplesRequestInterface) GetContext() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContext")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// GetContext indicates an expected call of GetContext.
func (mr *MockSdkClientDeleteTuplesRequestInterfaceMockRecorder) GetContext() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContext", reflect.TypeOf((*MockSdkClientDeleteTuplesRequestInterface)(nil).GetContext))
}

// GetOptions mocks base method.
func (m *MockSdkClientDeleteTuplesRequestInterface) GetOptions() *client.ClientWriteOptions {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOptions")
	ret0, _ := ret[0].(*client.ClientWriteOptions)
	return ret0
}

// GetOptions indicates an expected call of GetOptions.
func (mr *MockSdkClientDeleteTuplesRequestInterfaceMockRecorder) GetOptions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOptions", reflect.TypeOf((*MockSdkClientDeleteTuplesRequestInterface)(nil).GetOptions))
}

// Options mocks base method.
func (m *MockSdkClientDeleteTuplesRequestInterface) Options(options client.ClientWriteOptions) client.SdkClientDeleteTuplesRequestInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Options", options)
	ret0, _ := ret[0].(client.SdkClientDeleteTuplesRequestInterface)
	return ret0
}

// Options indicates an expected call of Options.
func (mr *MockSdkClientDeleteTuplesRequestInterfaceMockRecorder) Options(options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Options", reflect.TypeOf((*MockSdkClientDeleteTuplesRequestInterface)(nil).Options), options)
}

// MockSdkClientCheckRequestInterface is a mock of SdkClientCheckRequestInterface interface.
type MockSdkClientCheckRequestInterface struct {
	ctrl     *gomock.Controller
	recorder *MockSdkClientCheckRequestInterfaceMockRecorder
	isgomock struct{}
}

// MockSdkClientCheckRequestInterfaceMockRecorder is the mock recorder for MockSdkClientCheckRequestInterface.
type MockSdkClientCheckRequestInterfaceMockRecorder struct {
	mock *MockSdkClientCheckRequestInterface
}

// NewMockSdkClientCheckRequestInterface creates a new mock instance.
func NewMockSdkClientCheckRequestInterface(ctrl *gomock.Controller) *MockSdkClientCheckRequestInterface {
	mock := &MockSdkClientCheckRequestInterface{ctrl: ctrl}
	mock.recorder = &MockSdkClientCheckRequestInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSdkClientCheckRequestInterface) EXPECT() *MockSdkClientCheckRequestInterfaceMockRecorder {
	return m.recorder
}

// Body mocks base method.
func (m *MockSdkClientCheckRequestInterface) Body(body client.ClientCheckRequest) client.SdkClientCheckRequestInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Body", body)
	ret0, _ := ret[0].(client.SdkClientCheckRequestInterface)
	return ret0
}

// Body indicates an expected call of Body.
func (mr *MockSdkClientCheckRequestInterfaceMockRecorder) Body(body any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Body", reflect.TypeOf((*MockSdkClientCheckRequestInterface)(nil).Body), body)
}

// Execute mocks base method.
func (m *MockSdkClientCheckRequestInterface) Execute() (*client.ClientCheckResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(*client.ClientCheckResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockSdkClientCheckRequestInterfaceMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockSdkClientCheckRequestInterface)(nil).Execute))
}

// GetAuthorizationModelIdOverride mocks base method.
func (m *MockSdkClientCheckRequestInterface) GetAuthorizationModelIdOverride() *string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthorizationModelIdOverride")
	ret0, _ := ret[0].(*string)
	return ret0
}

// GetAuthorizationModelIdOverride indicates an expected call of GetAuthorizationModelIdOverride.
func (mr *MockSdkClientCheckRequestInterfaceMockRecorder) GetAuthorizationModelIdOverride() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthorizationModelIdOverride", reflect.TypeOf((*MockSdkClientCheckRequestInterface)(nil).GetAuthorizationModelIdOverride))
}

// GetBody mocks base method.
func (m *MockSdkClientCheckRequestInterface) GetBody() *client.ClientCheckRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBody")
	ret0, _ := ret[0].(*client.ClientCheckRequest)
	return ret0
}

// GetBody indicates an expected call of GetBody.
func (mr *MockSdkClientCheckRequestInterfaceMockRecorder) GetBody() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBody", reflect.TypeOf((*MockSdkClientCheckRequestInterface)(nil).GetBody))
}

// GetContext mocks base method.
func (m *MockSdkClientCheckRequestInterface) GetContext() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContext")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// GetContext indicates an expected call of GetContext.
func (mr *MockSdkClientCheckRequestInterfaceMockRecorder) GetContext() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContext", reflect.TypeOf((*MockSdkClientCheckRequestInterface)(nil).GetContext))
}

// GetOptions mocks base method.
func (m *MockSdkClientCheckRequestInterface) GetOptions() *client.ClientCheckOptions {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOptions")
	ret0, _ := ret[0].(*client.ClientCheckOptions)
	return ret0
}

// GetOptions indicates an expected call of GetOptions.
func (mr *MockSdkClientCheckRequestInterfaceMockRecorder) GetOptions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOptions", reflect.TypeOf((*MockSdkClientCheckRequestInterface)(nil).GetOptions))
}

// GetStoreIdOverride mocks base method.
func (m *MockSdkClientCheckRequestInterface) GetStoreIdOverride() *string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStoreIdOverride")
	ret0, _ := ret[0].(*string)
	return ret0
}

// GetStoreIdOverride indicates an expected call of GetStoreIdOverride.
func (mr *MockSdkClientCheckRequestInterfaceMockRecorder) GetStoreIdOverride() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoreIdOverride", reflect.TypeOf((*MockSdkClientCheckRequestInterface)(nil).GetStoreIdOverride))
}

// Options mocks base method.
func (m *MockSdkClientCheckRequestInterface) Options(options client.ClientCheckOptions) client.SdkClientCheckRequestInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Options", options)
	ret0, _ := ret[0].(client.SdkClientCheckRequestInterface)
	return ret0
}

// Options indicates an expected call of Options.
func (mr *MockSdkClientCheckRequestInterfaceMockRecorder) Options(options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Options", reflect.TypeOf((*MockSdkClientCheckRequestInterface)(nil).Options), options)
}

// MockSdkClientBatchCheckRequestInterface is a mock of SdkClientBatchCheckRequestInterface interface.
type MockSdkClientBatchCheckRequestInterface struct {
	ctrl     *gomock.Controller
	recorder *MockSdkClientBatchCheckRequestInterfaceMockRecorder
	isgomock struct{}
}

// MockSdkClientBatchCheckRequestInterfaceMockRecorder is the mock recorder for MockSdkClientBatchCheckRequestInterface.
type MockSdkClientBatchCheckRequestInterfaceMockRecorder struct {
	mock *MockSdkClientBatchCheckRequestInterface
}

// NewMockSdkClientBatchCheckRequestInterface creates a new mock instance.
func NewMockSdkClientBatchCheckRequestInterface(ctrl *gomock.Controller) *MockSdkClientBatchCheckRequestInterface {
	mock := &MockSdkClientBatchCheckRequestInterface{ctrl: ctrl}
	mock.recorder = &MockSdkClientBatchCheckRequestInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSdkClientBatchCheckRequestInterface) EXPECT() *MockSdkClientBatchCheckRequestInterfaceMockRecorder {
	return m.recorder
}

// Body mocks base method.
func (m *MockSdkClientBatchCheckRequestInterface) Body(body client.ClientBatchCheckBody) client.SdkClientBatchCheckRequestInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Body", body)
	ret0, _ := ret[0].(client.SdkClientBatchCheckRequestInterface)
	return ret0
}

// Body indicates an expected call of Body.
func (mr *MockSdkClientBatchCheckRequestInterfaceMockRecorder) Body(body any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Body", reflect.TypeOf((*MockSdkClientBatchCheckRequestInterface)(nil).Body), body)
}

// Execute mocks base method.
func (m *MockSdkClientBatchCheckRequestInterface) Execute() (*client.ClientBatchCheckResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(*client.ClientBatchCheckResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockSdkClientBatchCheckRequestInterfaceMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockSdkClientBatchCheckRequestInterface)(nil).Execute))
}

// GetAuthorizationModelIdOverride mocks base method.
func (m *MockSdkClientBatchCheckRequestInterface) GetAuthorizationModelIdOverride() *string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthorizationModelIdOverride")
	ret0, _ := ret[0].(*string)
	return ret0
}

// GetAuthorizationModelIdOverride indicates an expected call of GetAuthorizationModelIdOverride.
func (mr *MockSdkClientBatchCheckRequestInterfaceMockRecorder) GetAuthorizationModelIdOverride() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthorizationModelIdOverride", reflect.TypeOf((*MockSdkClientBatchCheckRequestInterface)(nil).GetAuthorizationModelIdOverride))
}

// GetBody mocks base method.
func (m *MockSdkClientBatchCheckRequestInterface) GetBody() *client.ClientBatchCheckBody {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBody")
	ret0, _ := ret[0].(*client.ClientBatchCheckBody)
	return ret0
}

// GetBody indicates an expected call of GetBody.
func (mr *MockSdkClientBatchCheckRequestInterfaceMockRecorder) GetBody() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBody", reflect.TypeOf((*MockSdkClientBatchCheckRequestInterface)(nil).GetBody))
}

// GetContext mocks base method.
func (m *MockSdkClientBatchCheckRequestInterface) GetContext() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContext")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// GetContext indicates an expected call of GetContext.
func (mr *MockSdkClientBatchCheckRequestInterfaceMockRecorder) GetContext() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContext", reflect.TypeOf((*MockSdkClientBatchCheckRequestInterface)(nil).GetContext))
}

// GetOptions mocks base method.
func (m *MockSdkClientBatchCheckRequestInterface) GetOptions() *client.ClientBatchCheckOptions {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOptions")
	ret0, _ := ret[0].(*client.ClientBatchCheckOptions)
	return ret0
}

// GetOptions indicates an expected call of GetOptions.
func (mr *MockSdkClientBatchCheckRequestInterfaceMockRecorder) GetOptions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOptions", reflect.TypeOf((*MockSdkClientBatchCheckRequestInterface)(nil).GetOptions))
}

// GetStoreIdOverride mocks base method.
func (m *MockSdkClientBatchCheckRequestInterface) GetStoreIdOverride() *string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStoreIdOverride")
	ret0, _ := ret[0].(*string)
	return ret0
}

// GetStoreIdOverride indicates an expected call of GetStoreIdOverride.
func (mr *MockSdkClientBatchCheckRequestInterfaceMockRecorder) GetStoreIdOverride() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoreIdOverride", reflect.TypeOf((*MockSdkClientBatchCheckRequestInterface)(nil).GetStoreIdOverride))
}

// Options mocks base method.
func (m *MockSdkClientBatchCheckRequestInterface) Options(options client.ClientBatchCheckOptions) client.SdkClientBatchCheckRequestInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Options", options)
	ret0, _ := ret[0].(client.SdkClientBatchCheckRequestInterface)
	return ret0
}

// Options indicates an expected call of Options.
func (mr *MockSdkClientBatchCheckRequestInterfaceMockRecorder) Options(options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Options", reflect.TypeOf((*MockSdkClientBatchCheckRequestInterface)(nil).Options), options)
}

// MockSdkClientExpandRequestInterface is a mock of SdkClientExpandRequestInterface interface.
type MockSdkClientExpandRequestInterface struct {
	ctrl     *gomock.Controller
	recorder *MockSdkClientExpandRequestInterfaceMockRecorder
	isgomock struct{}
}

// MockSdkClientExpandRequestInterfaceMockRecorder is the mock recorder for MockSdkClientExpandRequestInterface.
type MockSdkClientExpandRequestInterfaceMockRecorder struct {
	mock *MockSdkClientExpandRequestInterface
}

// NewMockSdkClientExpandRequestInterface creates a new mock instance.
func NewMockSdkClientExpandRequestInterface(ctrl *gomock.Controller) *MockSdkClientExpandRequestInterface {
	mock := &MockSdkClientExpandRequestInterface{ctrl: ctrl}
	mock.recorder = &MockSdkClientExpandRequestInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSdkClientExpandRequestInterface) EXPECT() *MockSdkClientExpandRequestInterfaceMockRecorder {
	return m.recorder
}

// Body mocks base method.
func (m *MockSdkClientExpandRequestInterface) Body(body client.ClientExpandRequest) client.SdkClientExpandRequestInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Body", body)
	ret0, _ := ret[0].(client.SdkClientExpandRequestInterface)
	return ret0
}

// Body indicates an expected call of Body.
func (mr *MockSdkClientExpandRequestInterfaceMockRecorder) Body(body any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Body", reflect.TypeOf((*MockSdkClientExpandRequestInterface)(nil).Body), body)
}

// Execute mocks base method.
func (m *MockSdkClientExpandRequestInterface) Execute() (*client.ClientExpandResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(*client.ClientExpandResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockSdkClientExpandRequestInterfaceMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockSdkClientExpandRequestInterface)(nil).Execute))
}

// GetAuthorizationModelIdOverride mocks base method.
func (m *MockSdkClientExpandRequestInterface) GetAuthorizationModelIdOverride() *string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthorizationModelIdOverride")
	ret0, _ := ret[0].(*string)
	return ret0
}

// GetAuthorizationModelIdOverride indicates an expected call of GetAuthorizationModelIdOverride.
func (mr *MockSdkClientExpandRequestInterfaceMockRecorder) GetAuthorizationModelIdOverride() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthorizationModelIdOverride", reflect.TypeOf((*MockSdkClientExpandRequestInterface)(nil).GetAuthorizationModelIdOverride))
}

// GetBody mocks base method.
func (m *MockSdkClientExpandRequestInterface) GetBody() *client.ClientExpandRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBody")
	ret0, _ := ret[0].(*client.ClientExpandRequest)
	return ret0
}

// GetBody indicates an expected call of GetBody.
func (mr *MockSdkClientExpandRequestInterfaceMockRecorder) GetBody() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBody", reflect.TypeOf((*MockSdkClientExpandRequestInterface)(nil).GetBody))
}

// GetContext mocks base method.
func (m *MockSdkClientExpandRequestInterface) GetContext() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContext")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// GetContext indicates an expected call of GetContext.
func (mr *MockSdkClientExpandRequestInterfaceMockRecorder) GetContext() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContext", reflect.TypeOf((*MockSdkClientExpandRequestInterface)(nil).GetContext))
}

// GetOptions mocks base method.
func (m *MockSdkClientExpandRequestInterface) GetOptions() *client.ClientExpandOptions {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOptions")
	ret0, _ := ret[0].(*client.ClientExpandOptions)
	return ret0
}

// GetOptions indicates an expected call of GetOptions.
func (mr *MockSdkClientExpandRequestInterfaceMockRecorder) GetOptions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOptions", reflect.TypeOf((*MockSdkClientExpandRequestInterface)(nil).GetOptions))
}

// GetStoreIdOverride mocks base method.
func (m *MockSdkClientExpandRequestInterface) GetStoreIdOverride() *string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStoreIdOverride")
	ret0, _ := ret[0].(*string)
	return ret0
}

// GetStoreIdOverride indicates an expected call of GetStoreIdOverride.
func (mr *MockSdkClientExpandRequestInterfaceMockRecorder) GetStoreIdOverride() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoreIdOverride", reflect.TypeOf((*MockSdkClientExpandRequestInterface)(nil).GetStoreIdOverride))
}

// Options mocks base method.
func (m *MockSdkClientExpandRequestInterface) Options(options client.ClientExpandOptions) client.SdkClientExpandRequestInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Options", options)
	ret0, _ := ret[0].(client.SdkClientExpandRequestInterface)
	return ret0
}

// Options indicates an expected call of Options.
func (mr *MockSdkClientExpandRequestInterfaceMockRecorder) Options(options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Options", reflect.TypeOf((*MockSdkClientExpandRequestInterface)(nil).Options), options)
}

// MockSdkClientListObjectsRequestInterface is a mock of SdkClientListObjectsRequestInterface interface.
type MockSdkClientListObjectsRequestInterface struct {
	ctrl     *gomock.Controller
	recorder *MockSdkClientListObjectsRequestInterfaceMockRecorder
	isgomock struct{}
}

// MockSdkClientListObjectsRequestInterfaceMockRecorder is the mock recorder for MockSdkClientListObjectsRequestInterface.
type MockSdkClientListObjectsRequestInterfaceMockRecorder struct {
	mock *MockSdkClientListObjectsRequestInterface
}

// NewMockSdkClientListObjectsRequestInterface creates a new mock instance.
func NewMockSdkClientListObjectsRequestInterface(ctrl *gomock.Controller) *MockSdkClientListObjectsRequestInterface {
	mock := &MockSdkClientListObjectsRequestInterface{ctrl: ctrl}
	mock.recorder = &MockSdkClientListObjectsRequestInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSdkClientListObjectsRequestInterface) EXPECT() *MockSdkClientListObjectsRequestInterfaceMockRecorder {
	return m.recorder
}

// Body mocks base method.
func (m *MockSdkClientListObjectsRequestInterface) Body(body client.ClientListObjectsRequest) client.SdkClientListObjectsRequestInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Body", body)
	ret0, _ := ret[0].(client.SdkClientListObjectsRequestInterface)
	return ret0
}

// Body indicates an expected call of Body.
func (mr *MockSdkClientListObjectsRequestInterfaceMockRecorder) Body(body any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Body", reflect.TypeOf((*MockSdkClientListObjectsRequestInterface)(nil).Body), body)
}

// Execute mocks base method.
func (m *MockSdkClientListObjectsRequestInterface) Execute() (*client.ClientListObjectsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(*client.ClientListObjectsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockSdkClientListObjectsRequestInterfaceMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockSdkClientListObjectsRequestInterface)(nil).Execute))
}

// GetAuthorizationModelIdOverride mocks base method.
func (m *MockSdkClientListObjectsRequestInterface) GetAuthorizationModelIdOverride() *string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthorizationModelIdOverride")
	ret0, _ := ret[0].(*string)
	return ret0
}

// GetAuthorizationModelIdOverride indicates an expected call of GetAuthorizationModelIdOverride.
func (mr *MockSdkClientListObjectsRequestInterfaceMockRecorder) GetAuthorizationModelIdOverride() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthorizationModelIdOverride", reflect.TypeOf((*MockSdkClientListObjectsRequestInterface)(nil).GetAuthorizationModelIdOverride))
}

// GetBody mocks base method.
func (m *MockSdkClientListObjectsRequestInterface) GetBody() *client.ClientListObjectsRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBody")
	ret0, _ := ret[0].(*client.ClientListObjectsRequest)
	return ret0
}

// GetBody indicates an expected call of GetBody.
func (mr *MockSdkClientListObjectsRequestInterfaceMockRecorder) GetBody() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBody", reflect.TypeOf((*MockSdkClientListObjectsRequestInterface)(nil).GetBody))
}

// GetContext mocks base method.
func (m *MockSdkClientListObjectsRequestInterface) GetContext() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContext")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// GetContext indicates an expected call of GetContext.
func (mr *MockSdkClientListObjectsRequestInterfaceMockRecorder) GetContext() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContext", reflect.TypeOf((*MockSdkClientListObjectsRequestInterface)(nil).GetContext))
}

// GetOptions mocks base method.
func (m *MockSdkClientListObjectsRequestInterface) GetOptions() *client.ClientListObjectsOptions {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOptions")
	ret0, _ := ret[0].(*client.ClientListObjectsOptions)
	return ret0
}

// GetOptions indicates an expected call of GetOptions.
func (mr *MockSdkClientListObjectsRequestInterfaceMockRecorder) GetOptions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOptions", reflect.TypeOf((*MockSdkClientListObjectsRequestInterface)(nil).GetOptions))
}

// GetStoreIdOverride mocks base method.
func (m *MockSdkClientListObjectsRequestInterface) GetStoreIdOverride() *string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStoreIdOverride")
	ret0, _ := ret[0].(*string)
	return ret0
}

// GetStoreIdOverride indicates an expected call of GetStoreIdOverride.
func (mr *MockSdkClientListObjectsRequestInterfaceMockRecorder) GetStoreIdOverride() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoreIdOverride", reflect.TypeOf((*MockSdkClientListObjectsRequestInterface)(nil).GetStoreIdOverride))
}

// Options mocks base method.
func (m *MockSdkClientListObjectsRequestInterface) Options(options client.ClientListObjectsOptions) client.SdkClientListObjectsRequestInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Options", options)
	ret0, _ := ret[0].(client.SdkClientListObjectsRequestInterface)
	return ret0
}

// Options indicates an expected call of Options.
func (mr *MockSdkClientListObjectsRequestInterfaceMockRecorder) Options(options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Options", reflect.TypeOf((*MockSdkClientListObjectsRequestInterface)(nil).Options), options)
}

// MockSdkClientListRelationsRequestInterface is a mock of SdkClientListRelationsRequestInterface interface.
type MockSdkClientListRelationsRequestInterface struct {
	ctrl     *gomock.Controller
	recorder *MockSdkClientListRelationsRequestInterfaceMockRecorder
	isgomock struct{}
}

// MockSdkClientListRelationsRequestInterfaceMockRecorder is the mock recorder for MockSdkClientListRelationsRequestInterface.
type MockSdkClientListRelationsRequestInterfaceMockRecorder struct {
	mock *MockSdkClientListRelationsRequestInterface
}

// NewMockSdkClientListRelationsRequestInterface creates a new mock instance.
func NewMockSdkClientListRelationsRequestInterface(ctrl *gomock.Controller) *MockSdkClientListRelationsRequestInterface {
	mock := &MockSdkClientListRelationsRequestInterface{ctrl: ctrl}
	mock.recorder = &MockSdkClientListRelationsRequestInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSdkClientListRelationsRequestInterface) EXPECT() *MockSdkClientListRelationsRequestInterfaceMockRecorder {
	return m.recorder
}

// Body mocks base method.
func (m *MockSdkClientListRelationsRequestInterface) Body(body client.ClientListRelationsRequest) client.SdkClientListRelationsRequestInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Body", body)
	ret0, _ := ret[0].(client.SdkClientListRelationsRequestInterface)
	return ret0
}

// Body indicates an expected call of Body.
func (mr *MockSdkClientListRelationsRequestInterfaceMockRecorder) Body(body any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Body", reflect.TypeOf((*MockSdkClientListRelationsRequestInterface)(nil).Body), body)
}

// Execute mocks base method.
func (m *MockSdkClientListRelationsRequestInterface) Execute() (*client.ClientListRelationsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(*client.ClientListRelationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockSdkClientListRelationsRequestInterfaceMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockSdkClientListRelationsRequestInterface)(nil).Execute))
}

// GetAuthorizationModelIdOverride mocks base method.
func (m *MockSdkClientListRelationsRequestInterface) GetAuthorizationModelIdOverride() *string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthorizationModelIdOverride")
	ret0, _ := ret[0].(*string)
	return ret0
}

// GetAuthorizationModelIdOverride indicates an expected call of GetAuthorizationModelIdOverride.
func (mr *MockSdkClientListRelationsRequestInterfaceMockRecorder) GetAuthorizationModelIdOverride() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthorizationModelIdOverride", reflect.TypeOf((*MockSdkClientListRelationsRequestInterface)(nil).GetAuthorizationModelIdOverride))
}

// GetBody mocks base method.
func (m *MockSdkClientListRelationsRequestInterface) GetBody() *client.ClientListRelationsRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBody")
	ret0, _ := ret[0].(*client.ClientListRelationsRequest)
	return ret0
}

// GetBody indicates an expected call of GetBody.
func (mr *MockSdkClientListRelationsRequestInterfaceMockRecorder) GetBody() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBody", reflect.TypeOf((*MockSdkClientListRelationsRequestInterface)(nil).GetBody))
}

// GetContext mocks base method.
func (m *MockSdkClientListRelationsRequestInterface) GetContext() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContext")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// GetContext indicates an expected call of GetContext.
func (mr *MockSdkClientListRelationsRequestInterfaceMockRecorder) GetContext() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContext", reflect.TypeOf((*MockSdkClientListRelationsRequestInterface)(nil).GetContext))
}

// GetOptions mocks base method.
func (m *MockSdkClientListRelationsRequestInterface) GetOptions() *client.ClientListRelationsOptions {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOptions")
	ret0, _ := ret[0].(*client.ClientListRelationsOptions)
	return ret0
}

// GetOptions indicates an expected call of GetOptions.
func (mr *MockSdkClientListRelationsRequestInterfaceMockRecorder) GetOptions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOptions", reflect.TypeOf((*MockSdkClientListRelationsRequestInterface)(nil).GetOptions))
}

// GetStoreIdOverride mocks base method.
func (m *MockSdkClientListRelationsRequestInterface) GetStoreIdOverride() *string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStoreIdOverride")
	ret0, _ := ret[0].(*string)
	return ret0
}

// GetStoreIdOverride indicates an expected call of GetStoreIdOverride.
func (mr *MockSdkClientListRelationsRequestInterfaceMockRecorder) GetStoreIdOverride() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoreIdOverride", reflect.TypeOf((*MockSdkClientListRelationsRequestInterface)(nil).GetStoreIdOverride))
}

// Options mocks base method.
func (m *MockSdkClientListRelationsRequestInterface) Options(options client.ClientListRelationsOptions) client.SdkClientListRelationsRequestInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Options", options)
	ret0, _ := ret[0].(client.SdkClientListRelationsRequestInterface)
	return ret0
}

// Options indicates an expected call of Options.
func (mr *MockSdkClientListRelationsRequestInterfaceMockRecorder) Options(options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Options", reflect.TypeOf((*MockSdkClientListRelationsRequestInterface)(nil).Options), options)
}

// MockSdkClientListUsersRequestInterface is a mock of SdkClientListUsersRequestInterface interface.
type MockSdkClientListUsersRequestInterface struct {
	ctrl     *gomock.Controller
	recorder *MockSdkClientListUsersRequestInterfaceMockRecorder
	isgomock struct{}
}

// MockSdkClientListUsersRequestInterfaceMockRecorder is the mock recorder for MockSdkClientListUsersRequestInterface.
type MockSdkClientListUsersRequestInterfaceMockRecorder struct {
	mock *MockSdkClientListUsersRequestInterface
}

// NewMockSdkClientListUsersRequestInterface creates a new mock instance.
func NewMockSdkClientListUsersRequestInterface(ctrl *gomock.Controller) *MockSdkClientListUsersRequestInterface {
	mock := &MockSdkClientListUsersRequestInterface{ctrl: ctrl}
	mock.recorder = &MockSdkClientListUsersRequestInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSdkClientListUsersRequestInterface) EXPECT() *MockSdkClientListUsersRequestInterfaceMockRecorder {
	return m.recorder
}

// Body mocks base method.
func (m *MockSdkClientListUsersRequestInterface) Body(body client.ClientListUsersRequest) client.SdkClientListUsersRequestInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Body", body)
	ret0, _ := ret[0].(client.SdkClientListUsersRequestInterface)
	return ret0
}

// Body indicates an expected call of Body.
func (mr *MockSdkClientListUsersRequestInterfaceMockRecorder) Body(body any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Body", reflect.TypeOf((*MockSdkClientListUsersRequestInterface)(nil).Body), body)
}

// Execute mocks base method.
func (m *MockSdkClientListUsersRequestInterface) Execute() (*client.ClientListUsersResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(*client.ClientListUsersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockSdkClientListUsersRequestInterfaceMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockSdkClientListUsersRequestInterface)(nil).Execute))
}

// GetAuthorizationModelIdOverride mocks base method.
func (m *MockSdkClientListUsersRequestInterface) GetAuthorizationModelIdOverride() *string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthorizationModelIdOverride")
	ret0, _ := ret[0].(*string)
	return ret0
}

// GetAuthorizationModelIdOverride indicates an expected call of GetAuthorizationModelIdOverride.
func (mr *MockSdkClientListUsersRequestInterfaceMockRecorder) GetAuthorizationModelIdOverride() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthorizationModelIdOverride", reflect.TypeOf((*MockSdkClientListUsersRequestInterface)(nil).GetAuthorizationModelIdOverride))
}

// GetBody mocks base method.
func (m *MockSdkClientListUsersRequestInterface) GetBody() *client.ClientListUsersRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBody")
	ret0, _ := ret[0].(*client.ClientListUsersRequest)
	return ret0
}

// GetBody indicates an expected call of GetBody.
func (mr *MockSdkClientListUsersRequestInterfaceMockRecorder) GetBody() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBody", reflect.TypeOf((*MockSdkClientListUsersRequestInterface)(nil).GetBody))
}

// GetContext mocks base method.
func (m *MockSdkClientListUsersRequestInterface) GetContext() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContext")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// GetContext indicates an expected call of GetContext.
func (mr *MockSdkClientListUsersRequestInterfaceMockRecorder) GetContext() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContext", reflect.TypeOf((*MockSdkClientListUsersRequestInterface)(nil).GetContext))
}

// GetOptions mocks base method.
func (m *MockSdkClientListUsersRequestInterface) GetOptions() *client.ClientListUsersOptions {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOptions")
	ret0, _ := ret[0].(*client.ClientListUsersOptions)
	return ret0
}

// GetOptions indicates an expected call of GetOptions.
func (mr *MockSdkClientListUsersRequestInterfaceMockRecorder) GetOptions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOptions", reflect.TypeOf((*MockSdkClientListUsersRequestInterface)(nil).GetOptions))
}

// GetStoreIdOverride mocks base method.
func (m *MockSdkClientListUsersRequestInterface) GetStoreIdOverride() *string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStoreIdOverride")
	ret0, _ := ret[0].(*string)
	return ret0
}

// GetStoreIdOverride indicates an expected call of GetStoreIdOverride.
func (mr *MockSdkClientListUsersRequestInterfaceMockRecorder) GetStoreIdOverride() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoreIdOverride", reflect.TypeOf((*MockSdkClientListUsersRequestInterface)(nil).GetStoreIdOverride))
}

// Options mocks base method.
func (m *MockSdkClientListUsersRequestInterface) Options(options client.ClientListUsersOptions) client.SdkClientListUsersRequestInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Options", options)
	ret0, _ := ret[0].(client.SdkClientListUsersRequestInterface)
	return ret0
}

// Options indicates an expected call of Options.
func (mr *MockSdkClientListUsersRequestInterfaceMockRecorder) Options(options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Options", reflect.TypeOf((*MockSdkClientListUsersRequestInterface)(nil).Options), options)
}

// MockSdkClientReadAssertionsRequestInterface is a mock of SdkClientReadAssertionsRequestInterface interface.
type MockSdkClientReadAssertionsRequestInterface struct {
	ctrl     *gomock.Controller
	recorder *MockSdkClientReadAssertionsRequestInterfaceMockRecorder
	isgomock struct{}
}

// MockSdkClientReadAssertionsRequestInterfaceMockRecorder is the mock recorder for MockSdkClientReadAssertionsRequestInterface.
type MockSdkClientReadAssertionsRequestInterfaceMockRecorder struct {
	mock *MockSdkClientReadAssertionsRequestInterface
}

// NewMockSdkClientReadAssertionsRequestInterface creates a new mock instance.
func NewMockSdkClientReadAssertionsRequestInterface(ctrl *gomock.Controller) *MockSdkClientReadAssertionsRequestInterface {
	mock := &MockSdkClientReadAssertionsRequestInterface{ctrl: ctrl}
	mock.recorder = &MockSdkClientReadAssertionsRequestInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSdkClientReadAssertionsRequestInterface) EXPECT() *MockSdkClientReadAssertionsRequestInterfaceMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockSdkClientReadAssertionsRequestInterface) Execute() (*client.ClientReadAssertionsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(*client.ClientReadAssertionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockSdkClientReadAssertionsRequestInterfaceMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockSdkClientReadAssertionsRequestInterface)(nil).Execute))
}

// GetAuthorizationModelIdOverride mocks base method.
func (m *MockSdkClientReadAssertionsRequestInterface) GetAuthorizationModelIdOverride() *string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthorizationModelIdOverride")
	ret0, _ := ret[0].(*string)
	return ret0
}

// GetAuthorizationModelIdOverride indicates an expected call of GetAuthorizationModelIdOverride.
func (mr *MockSdkClientReadAssertionsRequestInterfaceMockRecorder) GetAuthorizationModelIdOverride() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthorizationModelIdOverride", reflect.TypeOf((*MockSdkClientReadAssertionsRequestInterface)(nil).GetAuthorizationModelIdOverride))
}

// GetContext mocks base method.
func (m *MockSdkClientReadAssertionsRequestInterface) GetContext() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContext")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// GetContext indicates an expected call of GetContext.
func (mr *MockSdkClientReadAssertionsRequestInterfaceMockRecorder) GetContext() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContext", reflect.TypeOf((*MockSdkClientReadAssertionsRequestInterface)(nil).GetContext))
}

// GetOptions mocks base method.
func (m *MockSdkClientReadAssertionsRequestInterface) GetOptions() *client.ClientReadAssertionsOptions {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOptions")
	ret0, _ := ret[0].(*client.ClientReadAssertionsOptions)
	return ret0
}

// GetOptions indicates an expected call of GetOptions.
func (mr *MockSdkClientReadAssertionsRequestInterfaceMockRecorder) GetOptions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOptions", reflect.TypeOf((*MockSdkClientReadAssertionsRequestInterface)(nil).GetOptions))
}

// GetStoreIdOverride mocks base method.
func (m *MockSdkClientReadAssertionsRequestInterface) GetStoreIdOverride() *string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStoreIdOverride")
	ret0, _ := ret[0].(*string)
	return ret0
}

// GetStoreIdOverride indicates an expected call of GetStoreIdOverride.
func (mr *MockSdkClientReadAssertionsRequestInterfaceMockRecorder) GetStoreIdOverride() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoreIdOverride", reflect.TypeOf((*MockSdkClientReadAssertionsRequestInterface)(nil).GetStoreIdOverride))
}

// Options mocks base method.
func (m *MockSdkClientReadAssertionsRequestInterface) Options(options client.ClientReadAssertionsOptions) client.SdkClientReadAssertionsRequestInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Options", options)
	ret0, _ := ret[0].(client.SdkClientReadAssertionsRequestInterface)
	return ret0
}

// Options indicates an expected call of Options.
func (mr *MockSdkClientReadAssertionsRequestInterfaceMockRecorder) Options(options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Options", reflect.TypeOf((*MockSdkClientReadAssertionsRequestInterface)(nil).Options), options)
}

// MockSdkClientWriteAssertionsRequestInterface is a mock of SdkClientWriteAssertionsRequestInterface interface.
type MockSdkClientWriteAssertionsRequestInterface struct {
	ctrl     *gomock.Controller
	recorder *MockSdkClientWriteAssertionsRequestInterfaceMockRecorder
	isgomock struct{}
}

// MockSdkClientWriteAssertionsRequestInterfaceMockRecorder is the mock recorder for MockSdkClientWriteAssertionsRequestInterface.
type MockSdkClientWriteAssertionsRequestInterfaceMockRecorder struct {
	mock *MockSdkClientWriteAssertionsRequestInterface
}

// NewMockSdkClientWriteAssertionsRequestInterface creates a new mock instance.
func NewMockSdkClientWriteAssertionsRequestInterface(ctrl *gomock.Controller) *MockSdkClientWriteAssertionsRequestInterface {
	mock := &MockSdkClientWriteAssertionsRequestInterface{ctrl: ctrl}
	mock.recorder = &MockSdkClientWriteAssertionsRequestInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSdkClientWriteAssertionsRequestInterface) EXPECT() *MockSdkClientWriteAssertionsRequestInterfaceMockRecorder {
	return m.recorder
}

// Body mocks base method.
func (m *MockSdkClientWriteAssertionsRequestInterface) Body(body client.ClientWriteAssertionsRequest) client.SdkClientWriteAssertionsRequestInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Body", body)
	ret0, _ := ret[0].(client.SdkClientWriteAssertionsRequestInterface)
	return ret0
}

// Body indicates an expected call of Body.
func (mr *MockSdkClientWriteAssertionsRequestInterfaceMockRecorder) Body(body any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Body", reflect.TypeOf((*MockSdkClientWriteAssertionsRequestInterface)(nil).Body), body)
}

// Execute mocks base method.
func (m *MockSdkClientWriteAssertionsRequestInterface) Execute() (*client.ClientWriteAssertionsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(*client.ClientWriteAssertionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockSdkClientWriteAssertionsRequestInterfaceMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockSdkClientWriteAssertionsRequestInterface)(nil).Execute))
}

// GetAuthorizationModelIdOverride mocks base method.
func (m *MockSdkClientWriteAssertionsRequestInterface) GetAuthorizationModelIdOverride() *string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthorizationModelIdOverride")
	ret0, _ := ret[0].(*string)
	return ret0
}

// GetAuthorizationModelIdOverride indicates an expected call of GetAuthorizationModelIdOverride.
func (mr *MockSdkClientWriteAssertionsRequestInterfaceMockRecorder) GetAuthorizationModelIdOverride() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthorizationModelIdOverride", reflect.TypeOf((*MockSdkClientWriteAssertionsRequestInterface)(nil).GetAuthorizationModelIdOverride))
}

// GetBody mocks base method.
func (m *MockSdkClientWriteAssertionsRequestInterface) GetBody() *client.ClientWriteAssertionsRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBody")
	ret0, _ := ret[0].(*client.ClientWriteAssertionsRequest)
	return ret0
}

// GetBody indicates an expected call of GetBody.
func (mr *MockSdkClientWriteAssertionsRequestInterfaceMockRecorder) GetBody() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBody", reflect.TypeOf((*MockSdkClientWriteAssertionsRequestInterface)(nil).GetBody))
}

// GetContext mocks base method.
func (m *MockSdkClientWriteAssertionsRequestInterface) GetContext() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContext")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// GetContext indicates an expected call of GetContext.
func (mr *MockSdkClientWriteAssertionsRequestInterfaceMockRecorder) GetContext() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContext", reflect.TypeOf((*MockSdkClientWriteAssertionsRequestInterface)(nil).GetContext))
}

// GetOptions mocks base method.
func (m *MockSdkClientWriteAssertionsRequestInterface) GetOptions() *client.ClientWriteAssertionsOptions {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOptions")
	ret0, _ := ret[0].(*client.ClientWriteAssertionsOptions)
	return ret0
}

// GetOptions indicates an expected call of GetOptions.
func (mr *MockSdkClientWriteAssertionsRequestInterfaceMockRecorder) GetOptions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOptions", reflect.TypeOf((*MockSdkClientWriteAssertionsRequestInterface)(nil).GetOptions))
}

// GetStoreIdOverride mocks base method.
func (m *MockSdkClientWriteAssertionsRequestInterface) GetStoreIdOverride() *string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStoreIdOverride")
	ret0, _ := ret[0].(*string)
	return ret0
}

// GetStoreIdOverride indicates an expected call of GetStoreIdOverride.
func (mr *MockSdkClientWriteAssertionsRequestInterfaceMockRecorder) GetStoreIdOverride() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoreIdOverride", reflect.TypeOf((*MockSdkClientWriteAssertionsRequestInterface)(nil).GetStoreIdOverride))
}

// Options mocks base method.
func (m *MockSdkClientWriteAssertionsRequestInterface) Options(options client.ClientWriteAssertionsOptions) client.SdkClientWriteAssertionsRequestInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Options", options)
	ret0, _ := ret[0].(client.SdkClientWriteAssertionsRequestInterface)
	return ret0
}

// Options indicates an expected call of Options.
func (mr *MockSdkClientWriteAssertionsRequestInterfaceMockRecorder) Options(options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Options", reflect.TypeOf((*MockSdkClientWriteAssertionsRequestInterface)(nil).Options), options)
}
